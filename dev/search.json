[{"path":"https://markmfredrickson.github.io/optmatch/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 optmatch authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/MCFSolutions.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Classes and methods for min-cost flow solutions","text":"Optmatch finds optimal matches translating min-cost flow problems (Rosenbaum, 1991, JRSS-B; Hansen Klopfer, 2006, JCGS), relying min-cost flow solver works dual ascent. 2018 (version 0.9*), attempt made store dual problem solution found solver; accordingly, possible use solution starting value related matching problems. document lays roadmap “daylighting” min-cost flow material, .e. making accessible R user, warm starts supplementary calculations.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/MCFSolutions.html","id":"proximate-goals","dir":"Articles","previous_headings":"Overview","what":"Proximate goals","title":"Classes and methods for min-cost flow solutions","text":"solver saw discretized version distance, check whether solution optimal matching problem w/ double precision distance (checking whether primal solution back-transformed dual solution stand CS relation one another). (Cf. issue 160.) Warm starts MCF problems deriving double-precision distance w/ different discretization. (Cf. issue 76.) Use dual solution one problem warm start another problem arcs, arc costs original problem adding new arcs (existing nodes). Use dual solution one problem warm start another problem arcs arc costs, adding new “downstream” nodes new arcs connecting existing “upstream” nodes.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/MCFSolutions.html","id":"maybe-later-goals","dir":"Articles","previous_headings":"Overview","what":"Maybe-later goals","title":"Classes and methods for min-cost flow solutions","text":"Flexibly combine subproblem solutions (e.g., distributing subproblems across different cores combining). Merge dual solutions distinct subproblems, arriving possible starting value combined subproblem. supercede optmatch s3 class, methods S4 class, methods. Use dual solution basis computing maxErr / exceedance.","code":""},{"path":[]},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/MCFSolutions.html","id":"subproblems-subprobinfo","dir":"Articles","previous_headings":"Classes","what":"Subproblems / SubProbInfo","title":"Classes and methods for min-cost flow solutions","text":"SubProbInfo S4-typed data frame bearing information (sub)problems passed solver, translation units acceptable solver. Columns: groups, character (subproblem?); flipped, logical (upstream nodes MCF representation correspond columns match distance matrix, opposed rows, default?); hashed_dist, character (hashed ID double precision distance); resolution, double (grid-width discretization distances & node prices rounding handing solver); lagrangian_value, numeric (determined back-transformed node prices, arc costs arc flows); dual_value, numeric (determined back-transformed node prices arc costs); feasible, logical; exceedance, double (legacy criterion regret calculation). Rules/conventions: just selective record subproblem specs. type’s validity checker fast, eschewing expensive operations. feasible encodes whether flow-price pair found complementary slackness relationship, prior backtransformation distances & prices (applicable). words, feasible==FALSE indicates subproblem imposed infeasible matching constraints. “Upstream” nodes left diagram (Fig. 2 Hansen & Klopfer, 2006). Ordinarily ’ll correspond “treatment group”, .e. group indexed rows distance matrix helping determine matching problem, situations rows columns flipped passed solver, upstream nodes correspond columns downstream nodes rows.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/MCFSolutions.html","id":"nodeinfo-subclasses","dir":"Articles","previous_headings":"Classes > Subproblems / SubProbInfo","what":"NodeInfo & subclasses","title":"Classes and methods for min-cost flow solutions","text":"NodeInfo S4-typed data frame bearing non-null row.names attribute columns: name, character; price, double integer (node prices); upstream_not_down, logical (node type indicator, see ); supply, integer; groups, factor (optional; name subproblem); … (hold open possibility additional columns subclasses). Rules/conventions: document terms “node labels” row names NodeInfo table. Multiple subproblems’ node information can combined single NodeInfo object. Ordinarily NodeInfo’s name column node labels . reason presence avoid duplication among node labels, might otherwise occur NodeInfo arises concatenation solutions distinct matching problems (happened involve distinct units shared names). Within levels groups, values name unique. (Presently validity checker looks groups single level, interests avoiding slowdowns combining NodeInfo’s.) Coding node types upstream_not_down column: TRUE ~ upstream, .e. “T(f)” nodes Fig. 2 H.&K. ’06, FALSE ~ downstream “C(f)” nodes H.&K. ’06 Fig. 2; NA ~ bookkeeping nodes, e.g. “Overflow” “Sink” H.&K. ’06 Fig. 2. node’s price can NA_real_, upstream_not_down=FALSE. See also Rules/conventions pertaining MCFSolutions objects, . type’s validity checker fast, eschewing expensive operations. solver operated transformation distance, ’s correspondingly back-transformed node prices stored NodeInfo.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/MCFSolutions.html","id":"arcinfo","dir":"Articles","previous_headings":"Classes > Subproblems / SubProbInfo","what":"ArcInfo","title":"Classes and methods for min-cost flow solutions","text":"ArcInfo 2 slots: groups, factor, upstream, factor, downstream, factor; groups, factor, start, factor, end, factor, flow, integer (nonnegative), capacity, integer (nonnegative). Rules/conventions: terms network flow solution, presence row @matches encodes corresponding flow 1; absence encodes flow 0. (row means upstream/start node downstream/end nodes matched, absence means matched.) factors upstream, downstream, start end levels(). Arcs involving bookkeeping nodes lower capacity 0, upper capacity capacity. flow values must fall range (inclusive endpoints). type’s validity checker fast, eschewing expensive operations. @bookkeeping d.f. must row bookkeeping arcs problem. (groups, upstream) pair must appear (groups, name) pair NodeInfo table, upstream_not_down==TRUE; (groups, downstream) pair must appear (groups, name) NodeInfo pair, upstream_not_down==FALSE. Similarly (groups, start) (groups, end) pair carried table must NodeInfo table corresponding (groups, name) entry.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/MCFSolutions.html","id":"primal-dual-solution-pairs-mcfsolutions","dir":"Articles","previous_headings":"Classes","what":"Primal-dual solution pairs (MCFSolutions)","title":"Classes and methods for min-cost flow solutions","text":"practice, current plans call passing dual solutions (arrays node prices), also primal solutions (flow vectors), back solver. principle relax4f solver accommodate dual-primal pairs start values, cost rejiggering interactions; see comments issue 162. Also assessing CS requires combo primal dual solution. ’ll save , S4 object. Slots class MCFSolutions: subproblems, “SubProbInfo” object (see ); nodes, NodeInfo object (see ); arcs, ArcInfo object (see ). Rules/conventions: node-identifying columns @arcs precisely collection levels (enforced ArcInfo validity checker). addition, coincide row.names(.@nodes). latter enforced MCFSolutions’s validity check. @nodes table groups column. nodes table include nodes don’t correspond unit described corresponding match vector: bookkeeping nodes; potentially also nodes units filtered match vector. may also include nodes part MCF problem presented solver. (B/c e.g. represent subjects excluded prior matching, subproblem found infeasible prior sent solver, ’re part subproblem one(s) currently consideration.) case corresponding @node$price value may NA_real_ references appear corresponding ArcInfo tables. Distinct matchable units must share node labels (values row.names(@nodes)). bookkeeping nodes distinct subproblems. subjects appearing subproblem sent solver (b/c removed subproblem first, b/c subproblem found infeasible), won’t record subgroup treatment status. OTOH everyone matched processed way, subjects @nodes table carries explicit record subgroup, @subproblems @nodes combine give row/column treatment/control status via Checking validity object may moderately expensive object large, calls cross-comparison constituent objects. e.g. c() routinely check validity result; rather check applied smaller objects. Hold @.Data, @names @levels slots likely future use; see notes re future Optmatch S4 class.","code":"ifelse(with(object@subproblems, flipped[match(object@nodes$groups,groups)]),        !object@nodes$upstream_not_down,        object@nodes$upstream_not_down)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/MCFSolutions.html","id":"subtypes-for-specific-matching-problems","dir":"Articles","previous_headings":"Classes > Primal-dual solution pairs (MCFSolutions)","what":"Subtypes for specific matching problems","title":"Classes and methods for min-cost flow solutions","text":"Different kinds matching problem different bookkeeping nodes, implicit arc capacity constraints etc. Encode declaring appropriate subclasses MCFSolutions().","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/MCFSolutions.html","id":"fullmatchmcfsolutions","dir":"Articles","previous_headings":"Classes > Primal-dual solution pairs (MCFSolutions) > Subtypes for specific matching problems","what":"FullmatchMCFSolutions","title":"Classes and methods for min-cost flow solutions","text":"type extending MCFSolutions(), w/ characteristics: @nodes, exactly 2 node labels per subproblem s.t. .na(upstream_not_down): string beginning “(_Sink_)” another beginning “(_End_)”; @nodes, also appears exactly per subproblem; @nodes, node upstream_not_down == TRUE positive supply; @nodes, node upstream_not_down == FALSE supply==0; @nodes, node .na(upstream_not_down) nonpositive supply; @arcs@bookkeeping, node !.na(upstream_not_down) appears start arc end node (string beginning w/) (_End_); @arcs@bookkeeping, node upstream_not_down == FALSE appears start arc end node named string beginning (_Sink_).","code":""},{"path":[]},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/MCFSolutions.html","id":"immediate-plan","dir":"Articles","previous_headings":"Classes > Return value of fullmatch / pairmatch (*ptmatch)","what":"Immediate plan","title":"Classes and methods for min-cost flow solutions","text":"Return object bearing S3 class “optmatch”, changes. Embed MCFSolutions attribute.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/MCFSolutions.html","id":"final-solution","dir":"Articles","previous_headings":"Classes > Return value of fullmatch / pairmatch (*ptmatch)","what":"Final solution","title":"Classes and methods for min-cost flow solutions","text":"Return object new S4 class, Optmatch, inheriting factor well MCFSolutions.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/MCFSolutions.html","id":"methods-functions","dir":"Articles","previous_headings":"","what":"Methods & Functions","title":"Classes and methods for min-cost flow solutions","text":".optmatch()/.factor() MCFSolutions objects node.labels(),node.labels<- MCFSolutions objects (pull /set row.names(@nodes)) getMCFSolution(): extractor optmatch objects (& later Optmatch objects) c() MCFSolutions: rbind()s various constituent data frames, enforcing req’s subproblems distinct names, de-duping bookkeeping nodes enforcing requirement non-bookkeeping nodes’ names distinct. addArcs() MCFSolutions objects addNodes() MCFSolutions objects","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/fullmatch-vignette.html","id":"the-r-environment","dir":"Articles","previous_headings":"","what":"The R Environment","title":"Matching in R using the optmatch package","text":"software used worksheet freely available. R statistical package installed lab, may download install R Windows, Mac, Linux systems : https://www.r-project.org. following document walks common propensity score matching work-flow R. Example R code appear > indicating command prompt. may type code — line command R. Output follow prefaced ##. (R, # represents comment; command preceded number #’s executed.) example: (Note entering code , include > command. Also, longer lines code document, text may wrap onto second line, second line preceded + sign. entering code , wrap lines, include +.) R stores data named variables using arrow operator:","code":"> 2 + 2 ## [1] 4 > my.variable <- 2 + 2 > my.variable * 3 ## [1] 12"},{"path":[]},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/fullmatch-vignette.html","id":"outfitting-your-r-with-the-proper-add-ons","dir":"Articles","previous_headings":"Setup","what":"Outfitting your R with the proper add-ons","title":"Matching in R using the optmatch package","text":"R add-packages available install directly R: Thi command ask select CRAN server. server . may also asked whether ’d like set “personal library install packages ”; , answer yes. (default personal library location R suggest OK.) ’ll need run commands first time want use optmatch particular computer, install new version R.","code":"> install.packages(\"optmatch\")"},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/fullmatch-vignette.html","id":"setting-up-the-r-environment-for-matching","dir":"Articles","previous_headings":"Setup","what":"Setting up the R environment for matching","title":"Matching in R using the optmatch package","text":"Attach extension packages ’ll using matching associated diagnostics: ’ll time start new R session want run matching commands. load nuclear plants data, enter see first six rows: variables , enter can directly access variable within data frame follows. (Try typing commands see .) variable just viewed tabulated, pt, dummy whether plant built “partial turnkey guarantees.” plants comparable others terms construction costs. Let’s exclude time , simplicity. ’ll create data table (R jargon, “data frame”) just observations pt 0: inspect first six last six entries, view presenting matching problem, ’ll think plants built site previously existing plant (pr == 1) treatment group plants new sites (pr == 0) comparisons.","code":"> library(optmatch) > data(nuclearplants) > head(nuclearplants) ##     cost  date t1 t2  cap pr ne ct bw cum.n pt ## H 460.05 68.58 14 46  687  0  1  0  0    14  0 ## I 452.99 67.33 10 73 1065  0  0  1  0     1  0 ## A 443.22 67.33 10 85 1065  1  0  1  0     1  0 ## J 652.32 68.00 11 67 1065  0  1  1  0    12  0 ## B 642.23 68.00 11 78 1065  1  1  1  0    12  0 ## K 345.39 67.92 13 51  514  0  1  1  0     3  0 > help(\"nuclearplants\") > nuclearplants$pt > table(nuclearplants$pt) > with(nuclearplants, table(pt)) > nuke.nopt <- subset(nuclearplants, pt == 0) > head(nuke.nopt) > tail(nuke.nopt)"},{"path":[]},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/fullmatch-vignette.html","id":"pair-matching","dir":"Articles","previous_headings":"Optimal pair matching and 1:k matching","what":"Pair matching","title":"Matching in R using the optmatch package","text":"check number treated control plants: get pair match minimizing mean paired distance cap, among collections 7 non-overlapping pairs, readable report gets matched , type matching date cap, ’d type pairmatch(pr ~ cap + date, ...) instead pairmatch(pr ~ cap, ...). ’ll talk later combines discrepancies two variables. now, note form output command generates: variable length variables making nuke.nopt, assigning distinct name matched set. fix intuition, might try connecting units pairmatch() placed matched sets. New-site (left columns) versus existing-site (right columns) plants. “date” date-65; “capacity” cap-400. basic summary information match, try ’ve already typed pairmatch(...) part, can use -arrow, Home End keys avoid re-type. Alternatively, assign name “pm” matching result, Now, can just type print(pm, grouped = TRUE) summary(pm). following give basic matched analysis effect new existing site construction costs given help R’s linear modeling function. effect, existing site effect estimated one “way” two-way , “way” factor variable represents matching result, .e. pm.","code":"> table(nuke.nopt$pr) ##  ##  0  1  ## 19  7 > pairmatch(pr ~ cap, data = nuke.nopt) ##    H    I    A    J    B    K    L    M    C    N    O    P    Q    R    S    T  ## <NA>  1.1  1.1  1.2  1.2 <NA>  1.7 <NA>  1.3 <NA> <NA> <NA>  1.4  1.5  1.3 <NA>  ##    U    D    V    E    W    F    X    G    Y    Z  ##  1.6  1.4 <NA>  1.5 <NA>  1.6 <NA>  1.7 <NA> <NA> > print(pairmatch(pr ~ cap, data = nuke.nopt), grouped = TRUE) ##  Group Members ##    1.1    I, A ##    1.2    J, B ##    1.3    C, S ##    1.4    Q, D ##    1.5    R, E ##    1.6    U, F ##    1.7    L, G > summary(pairmatch(pr ~ cap, data = nuke.nopt)) > pm <- pairmatch(pr ~ cap, data = nuke.nopt) > summary(lm(cost ~ pr + pm, data = nuke.nopt))"},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/fullmatch-vignette.html","id":"matching-with-multiple-controls","dir":"Articles","previous_headings":"Optimal pair matching and 1:k matching","what":"Matching with multiple controls","title":"Matching in R using the optmatch package","text":"types matches might want try. ’s create matched triples (treatment group unit matched two control group units):","code":"> tm <- pairmatch(pr ~ cap, controls = 2, data = nuke.nopt)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/fullmatch-vignette.html","id":"did-matching-work","dir":"Articles","previous_headings":"Optimal pair matching and 1:k matching","what":"Did matching work?","title":"Matching in R using the optmatch package","text":"’s possible give software impossible list requirements match. instance, try running following: problem data don’t 3 comparison units go treatment unit, since 7 treatment units 19 comparison units. Matching can also fail distance matrix embodies matching constraints impossible meet. cases matching function generally run without complaint, although won’t create matches. example, caliper narrow forbid possible matches: Behind scenes, caliper argument restricts maximum distance matched objects. example, consider Table 1 . Plants H 1.3 units apart date. assigned caliper=1, never matched exceed caliper limit. matching want remove just subjects lacking counterpart within caliper distance, can pairmatch(..., remove.unmatchables = TRUE). won’t help minuscule caliper , less extreme calipers helps salvage matches.","code":"> pairmatch(pr ~ cap, controls = 3, data=nuke.nopt) > pairmatch(pr ~ cap + cost, caliper=.001, data = nuke.nopt) ## Warning in fullmatch.InfinitySparseMatrix(x = x, min.controls = controls, : Matching failed. (Restrictions impossible to meet?) ##  Enter ?matchfailed for more info. ##    H    I    A    J    B    K    L    M    C    N    O    P    Q    R    S    T  ## <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA>  ##    U    D    V    E    W    F    X    G    Y    Z  ## <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA>"},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/fullmatch-vignette.html","id":"did-matching-balance-the-covariate","dir":"Articles","previous_headings":"Optimal pair matching and 1:k matching","what":"Did matching balance the covariate?","title":"Matching in R using the optmatch package","text":"Comparing overt biases matching. assessment unmatched difference groups cap can via: output suppressed, relevant balance. variation hones part : (Note use square brackets, [ ], specifying subsets matrix. R one carefully distinguish square brackets, curly brackets parentheses.) parallel calculation takes match pm account. RItools package’s RItools::balanceTest() function zeroes balance, facilitates checking balance multiple variables time. examples: Exercises. Compare pm, tm unmatched samples terms balance t2. Compare pm, tm unmatched samples terms balance date. Compare pm Mahalanobis pair matching t1 terms balance date. Compare Mahalanobis pair matching cap date Mahalanobis pair matching cap, date t1,t2. Add last two variables one time, ’re comparing total three matches. Compare balance cap t2. Section “Checking balance general”, , presents convenient ways balance assessment many variables . getting let’s discuss try matching propensity scores.","code":"> cap.noadj <- lm(cap ~ pr, data = nuke.nopt) > summary(cap.noadj) > summary(lm(cap ~ pr, data = nuke.nopt))$coeff[\"pr\",] ##   Estimate Std. Error    t value   Pr(>|t|)  ## 79.7368421 92.7031668  0.8601307  0.3982280 > summary(lm(cap ~ pr + pm, data = nuke.nopt))$coeff[\"pr\",] ##   Estimate Std. Error    t value   Pr(>|t|)  ## -6.5714286  4.2865079 -1.5330495  0.1761543 > install.packages(\"RItools\") > library(RItools) > balanceTest(pr ~ cap + t2, data = nuke.nopt) ##      strata():        --                                         ##      stat      Treatment Control adj.diff std.diff    z          ## vars                                                             ## cap                883     803       79.7    0.39    0.86        ## t2                 66.9    59.5      7.33    0.68    1.61        ## ---Overall Test--- ##    chisquare df p.value ## --      2.71  2   0.258 ## --- ## Signif. codes:  0 '***' 0.001 '** ' 0.01 '*  ' 0.05 '.  ' 0.1 '   ' 1 > balanceTest(pr ~ cap + t2 + strata(pm) - 1, data = nuke.nopt) > # The `- 1` suppresses the unmatched output to make the output cleaner ##      strata():        pm                                          ##      stat      Treatment Control adj.diff std.diff    z           ## vars                                                              ## cap               883     890       -6.57   -0.03   -1.40         ## t2                66.9    61.3      5.57     0.54    1.49         ## ---Overall Test--- ##    chisquare df p.value ## pm      6.73  2  0.0345 ## --- ## Signif. codes:  0 '***' 0.001 '** ' 0.01 '*  ' 0.05 '.  ' 0.1 '   ' 1"},{"path":[]},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/fullmatch-vignette.html","id":"propensity-score-fitting-in-r","dir":"Articles","previous_headings":"Propensity Score Matching","what":"Propensity score fitting in R","title":"Matching in R using the optmatch package","text":"Logistic regression models fit R using function glm(), family argument set binomial. Example: fitted logistic regression stored object psm. propensity scores can accessed psm$fitted.values (estimated probabilities) scores(psm) (estimated logits probabilities). ’s often good idea compare groups’ distributions propensity score.  groups overlap, greatly. may wise restrict sample region overlap, least roughly. propensity caliper help . First, let’s match directly propensity score without restricting sample region overlap. restrict overlapping region, want imply caliper distances generated propensity score model. requires explicit generation match, involving separate steps generation distances followed matching upon distances. First, create distance matrix based upon psm: psm.dist matrix entry corresponding distance potential pair treatment control units. can caliper directly distance matrix, Entries Inf never matched. Adding caliper psm.dist disallow matching units differ 2 standard deviations. (Note differs previous use caliper directly pairmatch, caliper applied directly distances instead smartly upon standard deviations propensity scores.) Combining , can now match within calipers propensity score distance, perhaps Mahalanobis distances based selected covariates recommended Rubin Thomas (2000, JASA) others. Mahalanobis matching date, cap propensity score, instance, combined propensity caliper 1 pooled sd.","code":"> psm <- glm(pr ~ date + t1 + t2 + cap + ne + ct + bw + cum.n + pt, +            family = binomial, data = nuclearplants) > boxplot(psm) > ps.pm <- pairmatch(psm, data = nuclearplants) > summary(ps.pm) ## Structure of matched sets: ## 1:1 0:1  ##  10  12  ## Effective Sample Size:  10  ## (equivalent number of matched pairs). > psm.dist <- match_on(psm, data=nuclearplants) > caliper(psm.dist, 2) ##        control ## treated   H   I   J   K   L   M   N   O   P   Q   R   S   T U   V   W   X   Y ##       A Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf 0   0 Inf Inf Inf ##       B Inf   0 Inf Inf Inf   0   0   0 Inf   0   0   0   0 0   0   0 Inf Inf ##       C Inf   0   0 Inf Inf   0   0   0 Inf   0   0   0   0 0 Inf   0   0 Inf ##       D Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf   0 Inf 0   0 Inf Inf Inf ##       E Inf   0 Inf Inf Inf   0   0   0 Inf   0   0   0   0 0   0   0   0 Inf ##       F Inf   0 Inf Inf Inf   0 Inf   0 Inf Inf   0   0   0 0   0 Inf Inf Inf ##       G Inf   0 Inf Inf Inf   0   0   0 Inf   0   0   0   0 0   0   0 Inf Inf ##       a Inf   0 Inf Inf Inf Inf Inf Inf Inf Inf   0   0   0 0   0 Inf Inf Inf ##       b Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf 0   0 Inf Inf Inf ##       c Inf   0 Inf Inf Inf   0   0   0 Inf   0   0   0   0 0   0   0 Inf Inf ##        control ## treated   Z d   e   f ##       A Inf 0 Inf Inf ##       B   0 0 Inf   0 ##       C   0 0 Inf   0 ##       D Inf 0 Inf Inf ##       E   0 0 Inf   0 ##       F   0 0 Inf   0 ##       G   0 0 Inf   0 ##       a   0 0 Inf   0 ##       b Inf 0 Inf Inf ##       c   0 0 Inf   0 > ps.pm2 <- pairmatch(psm.dist, data = nuclearplants) > ps.pm3 <- pairmatch(psm.dist + caliper(psm.dist, 2), data = nuclearplants) > all.equal(ps.pm, ps.pm2, check.attributes=FALSE) ## [1] TRUE > all.equal(ps.pm, ps.pm3, check.attributes=FALSE) ## [1] \"7 string mismatches\" > summary(ps.pm3) ## Structure of matched sets: ## 1:1 0:1  ##  10  12  ## Effective Sample Size:  10  ## (equivalent number of matched pairs). > mhd1 <- match_on(pr ~ date + cap + scores(psm), data=nuclearplants) > mhpc.pm <- pairmatch(mhd1, caliper=1, data=nuclearplants) > summary(mhpc.pm) # oops ## Structure of matched sets: ## 1:1 0:1  ##  10  12  ## Effective Sample Size:  10  ## (equivalent number of matched pairs). > mhpc.pm <- pairmatch(mhd1, caliper=2, data=nuclearplants) > summary(mhpc.pm) # better! ## Structure of matched sets: ## 1:1 0:1  ##  10  12  ## Effective Sample Size:  10  ## (equivalent number of matched pairs)."},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/fullmatch-vignette.html","id":"checking-balance-in-general","dir":"Articles","previous_headings":"Propensity Score Matching","what":"Checking balance in general","title":"Matching in R using the optmatch package","text":"RItools package convenient function checking balance many variables simultaneously. get sense , try : can display compare matching matching, number axes. demonstration:  compact representation assessment, call summary() match, passing along fitted propensity model second argument. ’ve got RItools loaded, call balanceTest() background, reporting summary chi-square test results. Exercise. Try {least 3} different combinations propensity score Mahalanobis matching. Identify matches gives: “best balance overall,” measured Chi-square statistics; “best balance overall,” indicated largest standardized difference among covariates; best balance date cap, measured larger standardized differences two variables; best balance date cap, measured larger standardized differences two variables, among matches overall imbalance p-value .1.","code":"> balanceTest(pr ~ date + t1 + t2 + cap + ne + ct + bw + cum.n, +             data = nuclearplants) > balanceTest(pr ~ date + t1 + t2 + cap + ne + ct + bw + cum.n + pt + +               strata(ps.pm2) - 1, +             data = nuclearplants) > myb <- balanceTest(pr ~ date + t1 + t2 + cap + ne + ct + bw + cum.n + +                      strata(ps.pm2), +                    data = nuclearplants) > plot(myb) > print(myb, digits=1) ##       strata():    ps.pm2                                                --                                         ##       stat      Treatment Control adj.diff std.diff    z          Treatment Control adj.diff std.diff    z          ## vars                                                                                                                ## date                68      69       -0.2     0        0              68      69       -0.1     0        0          ## t1                  14      14       -0.3     0        0              14      14        0.4     0        0          ## t2                  69      63        6       1        2              69      59       10       1        2          ## cap                 870     890      -20      0        0              870     805       65      0        1          ## ne                  0.2     0.1       0.10    0        1              0.2     0.3      -0.07    0        0          ## ct                  0.3     0.2       0.1     0        0              0.3     0.5      -0.2     0       -1          ## bw                  0.2     0.2      0.00     0       NA              0.2     0.2      0.02     0        0          ## cum.n               8       9        -0.5     0        0              8       9        -0.6     0        0          ## ---Overall Test--- ##        chisquare df p.value ## ps.pm2         7  7     0.4 ## --            11  8     0.2 ## --- ## Signif. codes:  0 '***' 0.001 '** ' 0.01 '*  ' 0.05 '.  ' 0.1 '   ' 1 > summary(ps.pm2, psm) ## Structure of matched sets: ## 1:1 0:1  ##  10  12  ## Effective Sample Size:  10  ## (equivalent number of matched pairs). ##  ## Balance test overall result: ##   chisquare df p.value ##        7.31  8   0.503"},{"path":[]},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/fullmatch-vignette.html","id":"full-matching-and-matching-with-a-varying-number-of-controls","dir":"Articles","previous_headings":"Other topics in matching","what":"Full matching and matching with a varying number of controls","title":"Matching in R using the optmatch package","text":"Try compare:","code":"> summary(fullmatch(pr ~ date + cap, data = nuke.nopt)) > summary(fullmatch(pr ~ date + cap, data = nuke.nopt, min = 1)) > summary(fullmatch(pr ~ date + cap, data = nuke.nopt, min = 2, max = 3))"},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/fullmatch-vignette.html","id":"subclassification-before-matching","dir":"Articles","previous_headings":"Other topics in matching","what":"Subclassification before matching","title":"Matching in R using the optmatch package","text":"Recall data set nuclearplants 32 observations, 6 excluded. plants built “partial turnkey” guarantees (pt == 1), costs difficult compare plants. might include excluded plants matching among . need subclassify prior matching. common useful operation, optmatch designed help via strata term matching formula.","code":"> pairmatch(pr ~ date + cap + scores(psm), data=nuclearplants) ##    H    I    A    J    B    K    L    M    C    N    O    P    Q    R    S    T  ## <NA>  1.1  1.1 <NA>  1.2 <NA> <NA>  1.4  1.3  1.3 <NA> <NA> <NA>  1.2 <NA>  1.8  ##    U    D    V    E    W    F    X    G    Y    Z    d    e    f    a    b    c  ##  1.7  1.4  1.5  1.5 <NA>  1.6  1.6  1.7 <NA> <NA>  1.9 <NA> 1.10  1.8  1.9 1.10 > pairmatch(pr ~ date + cap + scores(psm) + strata(pt), data=nuclearplants) ##    H    I    A    J    B    K    L    M    C    N    O    P    Q    R    S    T  ## <NA>  0.1  0.1 <NA>  0.2 <NA> <NA>  0.4  0.3  0.3 <NA> <NA> <NA>  0.2 <NA> <NA>  ##    U    D    V    E    W    F    X    G    Y    Z    d    e    f    a    b    c  ##  0.7  0.4  0.5  0.5 <NA>  0.6  0.6  0.7 <NA> <NA>  1.2  1.1  1.3  1.1  1.2  1.3"},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/fullmatch-vignette.html","id":"distances","dir":"Articles","previous_headings":"Other topics in matching","what":"Distances","title":"Matching in R using the optmatch package","text":"’ll often want several variations match. may save computation typing time store distance ’re using match, ’re going re-use distance. , ’ll explicitly separate distance-making matching, two steps ’ve merged together thus far. ’ll use match_on() create distances. matching distance look like? ’s upper-left corner one : (Note use square brackets, [ ], specifying rows columns distance matrix. find isn’t working distance ’ve produced, try .matrix(.dist)[1:3,1:3] similar.) Matching caliper 2 pooled standard deviations cap variable: Entries Inf NaN distance matrix interpreted forbidden matches. Thus matches cap, insisting paired units differ 2 pooled SDs cap. prefer set requirement much paired units can differ cap original units, rather standard units, create cap.dist somewhat different way. ’s example help page caliper(). Enter help(caliper) R command line.","code":"> cap.dist <- match_on(pr ~ cap, data = nuke.nopt) > pm1 <- pairmatch(pr ~ cap, data=nuke.nopt) > pm2 <- pairmatch(cap.dist, data=nuke.nopt) > all.equal(pm1, pm2, check.attributes = FALSE) ## [1] TRUE > summary(pm2) ## Structure of matched sets: ## 1:1 0:1  ##   7  12  ## Effective Sample Size:  7  ## (equivalent number of matched pairs). > round(cap.dist[1:3, 1:3], 1) ##          control ## treatment   H   I   J ##         A 1.8 0.0 0.0 ##         B 1.8 0.0 0.0 ##         C 0.6 1.2 1.2 > round(cap.dist + caliper(cap.dist, 2), 1) ##        control ## treated   H   I   J   K   L   M   N   O   P   Q   R   S   T   U   V   W   X   Y ##       A 1.8 0.0 0.0 Inf 1.2 Inf 1.3 Inf 1.3 Inf 0.1 1.0 1.4 1.0 0.1 0.7 1.3 Inf ##       B 1.8 0.0 0.0 Inf 1.2 Inf 1.3 Inf 1.3 Inf 0.1 1.0 1.4 1.0 0.1 0.7 1.3 Inf ##       C 0.6 1.2 1.2 1.5 0.0 1.7 0.1 1.2 0.2 1.4 1.1 0.1 0.2 0.1 1.3 0.4 0.2 1.4 ##       D 0.7 Inf Inf 0.1 1.4 0.3 1.2 0.1 1.2 0.0 Inf 1.5 1.2 1.5 Inf 1.8 1.2 0.0 ##       E 1.7 0.1 0.1 Inf 1.1 Inf 1.2 Inf 1.2 Inf 0.0 1.0 1.3 1.0 0.2 0.7 1.3 Inf ##       F 0.7 1.1 1.1 1.5 0.0 1.8 0.2 1.3 0.2 1.4 1.1 0.1 0.2 0.1 1.2 0.4 0.2 1.4 ##       G 0.6 1.2 1.2 1.5 0.0 1.7 0.1 1.2 0.1 1.4 1.1 0.1 0.2 0.1 1.3 0.4 0.2 1.3 ##        control ## treated   Z ##       A 0.3 ##       B 0.3 ##       C 1.5 ##       D Inf ##       E 0.4 ##       F 1.4 ##       G 1.5 > pairmatch(cap.dist + caliper(cap.dist, 2), data = nuke.nopt)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/fullmatch-vignette.html","id":"trying-it-out-on-your-own","dir":"Articles","previous_headings":"Other topics in matching","what":"Trying it out on your own","title":"Matching in R using the optmatch package","text":"suggestions data sets try . another interesting (toy) data set, can use “tli” data set xtable package. might compare test scores kids disadvg==\"YES\" kids disadvg==\"\" using propensity matching, combination Mahalanobis matching caliper matching. check propensity overlap may inform decision whether include propensity caliper. sure check balance, check structure matched sets. Three sources data can gotten follows. First, Paul Rosenbaum collected many data sets discussed Design Observational Studies (2010) DOS DOS2 packages. Second, “lalonde” data set, discussed Lalonde (1986, . Econom. Rev.), Dehejia Wahba (1999, JASA) Smith Todd (2005, J. Econom.), bundled several R packages, including arm Matching. get : Third, data used Connors et al (1996, J. . Med. Assoc.) examine costs, benefits risks associated right heart catheterization bundled Frank Harrell collaborators’ Hmisc package.","code":"> install.packages(\"xtable\") # if not already installed > data(tli, package = \"xtable\") > install.packages(\"DOS\") # if not already installed > install.packages(\"DOS2\") # if not already installed > data(package = \"DOS\") > data(package = \"DOS2\") > install.packages(\"arm\") # if not already installed > data(lalonde, package = \"arm\") > help(\"lalonde\", package = \"arm\") > install.packages(\"Hmisc\") # if not already installed > Hmisc:::getHdata(rhc, what = \"all\")"},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/matching-from-foreign-software.html","id":"general-comments","dir":"Articles","previous_headings":"","what":"General comments","title":"Using Optmatch on data in SAS, Stata, etc","text":"users preferred data analysis software R, optmatch can still easily used perform matching data analysis can performed preferred software. general, procedure (Optionally, wish match using propensity score, fit model include predicted propensity scores data set.) Import data R. Perform matching R using optmatch. Export data R, including information matched sets. Import data back preferred software. general way import data back--forth using comma separated value files (.csv files), statistical software able read & write. .csv files, sample R code may example sort operation SAS . Following , demonstrate similar procedure Stata using R package haven reads writes Stata’s .dta files directly.","code":"> externaldata <- read.csv(\"externaldata.csv\", header = TRUE) > externaldata$match <- fullmatch(..., data = externaldata) > write.csv(externaldata, file = \"externaldata.matched.csv\")"},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/matching-from-foreign-software.html","id":"using-optmatch-with-sas","dir":"Articles","previous_headings":"","what":"Using Optmatch with SAS","title":"Using Optmatch on data in SAS, Stata, etc","text":"example, lets say simple demographics. treat gender treatment indicator, wish match combination propensity score gender (using age height) age. Now can fit logistic model predict gender using age height. Finally, since want match new ppty propensity score age, can drop height. Export file SAS .csv file. Inside R, can load data. string variables (e.g. race “White”, “Hispanic”, etc), may need include argument stringsAsFactors = FALSE. (default current R, older versions R TRUE default.) Now, perform matching desired, saving final match sasdata. example, Save data back .csv follows. use row.names = FALSE stops R including row names (likely 1, 2, 3, etc) first column data. re-arranged data point, may need set TRUE, keep mind handle properly SAS, default treat variable. Now, returning SAS, can read new rout.sas.csv file . catch want ensure match read string using $, since may values like 1.1 1.10, representing two different matches, identical treated numeric. argument firstobs=2 skips variable names; alternatively pass col.names=FALSE R’s write.csv, rout.sas.csv file lacks variable information, may useful .","code":"data people;   infile datalines dsd dlm=' ' missover;   input gender age height;  datalines; 0 25 62 0 41 68 0 38 63 0 22 62 1 33 70 1 35 71 1 47 68 1 23 64 ; run; proc logistic data = people;   model gender (event='1') = age height;   output out = preddata p=ppty; run; data newpeople;   set preddata;   keep gender age ppty; run; proc export data=newpeople;   outfile=\"/path/to/save/sasout.csv\"; run; > sasdata <- read.csv(\"/path/to/save/sasout.csv\", header = TRUE) > library(optmatch) > f <- fullmatch(gender ~ age + ppty, data = sasdata) > sasdata$match <- f > write.csv(sasdata, \"/path/to/saverout.sas.csv\", row.names = FALSE) data matchedpeople;   infile \"/path/to/save/rout.sas.csv\" dsd firstobs=2;   input gender age ppty match $; run;"},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/matching-from-foreign-software.html","id":"a-note-about-ordering","dir":"Articles","previous_headings":"Using Optmatch with SAS","what":"A Note about Ordering","title":"Using Optmatch on data in SAS, Stata, etc","text":"carry additional operations steps re-order original data, data exported R, two data sets mis-matched rows end. concern, please retain create unique identifier per row. example, something like subsetting data drop variables irrelevant matching, sure keep rownum. ’ve brought data match information back SAS, can sort data sets merge something like","code":"data people_with_id     set people;     rownum = _N_; run; proc sort data=people_with_id out=people_with_id2;   by rownum; run;  proc sort data=matchedpeople out=matchedpeople2;   by rownum; run;  data matchedmerged ;   merge people_with_id2 matchedpeople2;   by rownum; run;"},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/matching-from-foreign-software.html","id":"using-optmatch-with-stata","dir":"Articles","previous_headings":"","what":"Using Optmatch with Stata","title":"Using Optmatch on data in SAS, Stata, etc","text":"’ll use example, simple demographics. treat gender treatment indicator, wish match combination propensity score gender (using age height) age. First, lets fit logistic regression model. end ’ll merging two files together avoid ordering issues, noted , ’ll create unique identifier. ’ll save relevant variables (treatment indicator, anything matched , ID variable merge ) avoid saving loading large file. Turning R, can read using haven package Now, perform matching desired, saving final match statadata. example, ’ll use haven write data back Stata. recommend using .csv files transfer data back Stata, though write.csv file similar SAS. Back Stata, can merge existing data set following commands: force option may necessary overcome type differences. Additional tweaks may necessary special variable types.","code":"input gender age height 0 25 62 0 41 68 0 38 63 0 22 62 1 33 70 1 35 71 1 47 68 1 23 64 end logit gender age height predict ppty, xb gen rownum = _n preserve keep gender age ppty rownum save \"/path/to/save/toR.dta\" restore > library(haven) > statadata <- read_dta(\"/path/to/save/toR.dta\") > library(optmatch) > f <- fullmatch(gender ~ age + ppty, data = sttadata) > statadata$match <- f > write_dta(statadata, \"/path/to/save/rout.stata.dta\") sort rownum merge 1:1 rownum using \"/path/to/save/rout.stata.dta\""},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/matching-within-subgroups.html","id":"combining-matches","dir":"Articles","previous_headings":"","what":"Combining matches","title":"Combining Matches Within Subgroups","text":"optmatch 0.9-11 , optmatch objects can easily combined facilitate breaking problem smaller sub-problems reconstituting matched structure entire data set. demonstrate , let’s consider infert data set. “case” variable indicates treatment (1) versus control (0) status. ’ll want match upon “age”. Due sample size, compute matches entire data set, fullmatch call generate distance matrix size 165×83=13,695165\\times 83 = 13,695. However, instead compute match within level “education” variable, ’d compute three different distance matrices, total size 8×4+80×40+77×39=6,2358\\times 4 + 80\\times 40 + 77\\times 39 = 6,235, reduction 55%. ’ll splitting data within match. matched sets quite large (1:5+) let’s put restrictions. Now simply combine three matches.","code":"> data(infert) > head(infert) ##   education age parity induced case spontaneous stratum pooled.stratum ## 1    0-5yrs  26      6       1    1           2       1              3 ## 2    0-5yrs  42      1       1    1           0       2              1 ## 3    0-5yrs  39      6       2    1           0       3              4 ## 4    0-5yrs  34      4       2    1           0       4              2 ## 5   6-11yrs  35      3       1    1           1       5             32 ## 6   6-11yrs  36      4       2    1           1       6             36 > table(infert$case) ##  ##   0   1  ## 165  83 > table(infert$education, infert$case) ##           ##            0  1 ##   0-5yrs   8  4 ##   6-11yrs 80 40 ##   12+ yrs 77 39 > f1 <- fullmatch(case ~ age, data = infert[infert$education == \"0-5yrs\", ]) > f2 <- fullmatch(case ~ age, data = infert[infert$education == \"6-11yrs\", ]) > f3 <- fullmatch(case ~ age, data = infert[infert$education == \"12+ yrs\", ]) > summary(f1) ## Structure of matched sets: ## 1:2  ##   4  ## Effective Sample Size:  5.3  ## (equivalent number of matched pairs). > summary(f2) ## Structure of matched sets: ##  1:1  1:2  1:3  1:4 1:5+  ##   20    8    6    4    2  ## Effective Sample Size:  49.4  ## (equivalent number of matched pairs). > summary(f3) ## Structure of matched sets: ##  1:1  1:2  1:3  1:4 1:5+  ##   23    5    6    2    3  ## Effective Sample Size:  47  ## (equivalent number of matched pairs). > f2 <- fullmatch(case ~ age, data = infert[infert$education == \"6-11yrs\", ], +                 max.controls = 4) > f3 <- fullmatch(case ~ age, data = infert[infert$education == \"12+ yrs\", ], +                 max.controls = 4) > summary(f2) ## Structure of matched sets: ## 1:1 1:2 1:3 1:4  ##  18  10   6   6  ## Effective Sample Size:  49.9  ## (equivalent number of matched pairs). > summary(f3) ## Structure of matched sets: ## 1:1 1:2 1:3 1:4  ##  20   6   7   6  ## Effective Sample Size:  48.1  ## (equivalent number of matched pairs). > fcombine <- c(f1, f2, f3) > summary(fcombine) ## Structure of matched sets: ## 1:1 1:2 1:3 1:4  ##  38  20  13  12  ## Effective Sample Size:  103.4  ## (equivalent number of matched pairs). > infert$match <- fcombine"},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/matching-within-subgroups.html","id":"using-the-within-argument","dir":"Articles","previous_headings":"","what":"Using the within argument","title":"Combining Matches Within Subgroups","text":"alternative approach using within argument exactMatch function define subproblems. Observe obtain equivalent matched structure. notes comparing two approaches: using within argument, restrictions must across subproblems. , max.controls, min.controls omit.fraction equivalent. running subproblems separately, can set different restrictions per subproblem. E.g., matched structures equivalent two approaches (restrictions across subproblems), actual matched sets may differ observations equal distance. general considered problem.","code":"> fwithin <- fullmatch(case ~ age, data = infert, max.controls = 4, +                      within = exactMatch(case ~ education, data = infert)) > summary(fwithin) ## Structure of matched sets: ## 1:1 1:2 1:3 1:4  ##  38  20  13  12  ## Effective Sample Size:  103.4  ## (equivalent number of matched pairs). > f1 <- fullmatch(z ~ x, data = d[d$group == 1, ], max.controls = 2) > f2 <- fullmatch(z ~ x, data = d[d$group == 2, ], min.controls = 1/3) > c(f1, f2)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/performance.html","id":"performance-testing-strategy","dir":"Articles","previous_headings":"","what":"Performance Testing Strategy","title":"Performance Testing","text":"R provides built execution profiling Rprof function (similarly named command line option). invoked, function regularly interrupts normal processing writes current call stack file. information can used attribute portion run time attributable different functions. interpretation data, rely profr package, provides graphical summaries help make raw profile data manageable. Since suspect creation large data sets may account sizeable portion runtime large problems, also profile memory usage simulated data described section.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/performance.html","id":"simulated-data","dir":"Articles","previous_headings":"","what":"Simulated Data","title":"Performance Testing","text":"proceeding actual profiling, begin creating simulated data.1 use 1000 individuals, 442 receiving treatment condition. Treatment assignment based simple linear model 3 covariates (two Normal variables one categorical variable 5 levels). problems, create model treatment assignment pull linear predictors model. Figure 1 shows distributions predicted probabilities treated control groups (henceforth propensity score). Figure 1. Relative distribution predicted probabilities simulated treated control units.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/performance.html","id":"distance-creation","dir":"Articles","previous_headings":"","what":"Distance Creation","title":"Performance Testing","text":"begin benchmarking dense distance creation.2 match_on.numeric method least complicated interface applies least pre-processing input. Figure 2 shows profile data using match_on.numeric propensity score. Figure 2. Profiling diagram dense distance creation N = r N units. two ways create sparse problems. first, use caliper argument (numeric glm methods match_on). argument looks treated control values computes treated control units compared, computes exact distances . Applying caliper width 1 simulated data, leads sparse matrix 23.7% finite entries. Figure 3 shows profiling data process. alternative caliper argument within argument. method general, applying match_on methods, can sometimes require generating dense matrix first (though always — exactMatch function doesn’t require dense matrix). use within argument, use exactMatch create two subproblems based categorical covariate. 12.9% finite entries. Figure 4 shows profiling results using within argument. Figure 3. Profiling diagram caliper based sparse distance creation N = r N units. Figure 4. Profiling diagram within based sparse distance creation N = r N units.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/performance.html","id":"match_on-methods","dir":"Articles","previous_headings":"","what":"match_on Methods","title":"Performance Testing","text":"additional methods add pre-processing distance creation. methods can work sparse problems, keep things simple, examples just create dense matrices. glm method relatively small wrapper around numeric method used previous examples. Figure 5 shows profiling data glm method, expect look similar Figure 2, dense matrix problem previous section. Figure 5. Profiling diagram glm distance creation N = r N units. Figure 6 shows profiling data using formula method. method, default, creates squared Mahalanobis distance treated control pairs (Euclidean distances scaled variance-covariance matrix). Figure 6 shows profiling data using formula method. plot expected different previous previous examples based simple absolute difference 1-D vector. task, however, compute variance-covariance matrix produce series multiplications compute squared distances. may opportunities improve components distance creation. Additionally, may scale way, one dominating small problems large. plot provide information scaling nature function. Figure 6. Profiling diagram formula (Mahalanobis) distance creation N = r N units.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/performance.html","id":"matching","dir":"Articles","previous_headings":"","what":"Matching","title":"Performance Testing","text":"Now distance creation code benchmarked, now consider matching process . reuse earlier distance objects. keep things simple, matches computed using fullmatch default settings. process matching, currently implemented optmatch can broken following steps: expect see phases next figures. Figure 7 shows matching process applied dense distance matrix previous section. Figure 8 shows profiling information caliper argument based sparse distance matrix. Figure 9 shows profiling data stratified, sparse problem (can split separate calls solver) Figure 7. Profiling diagram dense matrix based matching N = r N units. Figure 8. Profiling diagram sparse matrix based matching N = r N units. Figure 9. Profiling diagram stratified sparse matrix based matching N = r N units. previous tests used fullmatch default arguments. test use various constraint arguments, call pairmatch dense distance problem. addition fixing minimum maximum number controls per matched set 1, pairmatch function inspects distance object set appropriate values omit.fraction, argument allows portion control group discarded. Figure 10 shows profiling data. Figure 10. Profiling diagram dense matrix pairmatching N = r N units.","code":"#> Warning in fullmatch(result.dense): Without 'data' argument the order of the match is not guaranteed #>     to be the same as your original data. #> Warning in fullmatch(result.sparse.caliper): Without 'data' argument the order of the match is not guaranteed #>     to be the same as your original data. #> Warning in fullmatch(result.sparse.within): Without 'data' argument the order of the match is not guaranteed #>     to be the same as your original data. #> Warning in fullmatch(x = x, min.controls = controls, max.controls = controls, : Without 'data' argument the order of the match is not guaranteed #>     to be the same as your original data."},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/performance.html","id":"mdist-and-match_on","dir":"Articles","previous_headings":"","what":"mdist and match_on","title":"Performance Testing","text":"version 0.7 optmatch earlier, primary method creating distances use mdist function. version 0.8, match_on added comprehensive tool, specifically one allowed arbitrary sparseness distances matrices. Figure 11. Profiling results stratified mdist distance problem.","code":"#> Intervals smaller than ~5ms will probably not result in accurate timings. #> Warning in Rprof(prof_output, interval = 0.001, line.profiling = TRUE, #> gc.profiling = TRUE, : interval too short for this platform, using '0.010000' #> Warning in mdist(model, structure.fmla = ~X3): 'mdist' is deprecated. #> Use 'match_on' instead. #> See help(\"Deprecated\")"},{"path":[]},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/performance.html","id":"scaling","dir":"Articles","previous_headings":"Appendix","what":"Scaling","title":"Performance Testing","text":"section considers two functions scale problem size gets bigger. create problems sets size N = 2K K treatment K control units. Figure 12 shows run time two functions K increased. y axis logged showing methods grow roughly quadratically, expect nature algorithms. course, absolute run time match_on orders magnitude worse. Figure 12. Run times increasingly large problems match_on (red) mdist (blue) functions.","code":"#> Warning in mdist(z ~ data): 'mdist' is deprecated. #> Use 'match_on' instead. #> See help(\"Deprecated\") #> Warning in mdist(z ~ data): 'mdist' is deprecated. #> Use 'match_on' instead. #> See help(\"Deprecated\") #> Warning in mdist(z ~ data): 'mdist' is deprecated. #> Use 'match_on' instead. #> See help(\"Deprecated\") #> Warning in mdist(z ~ data): 'mdist' is deprecated. #> Use 'match_on' instead. #> See help(\"Deprecated\") #> Warning in mdist(z ~ data): 'mdist' is deprecated. #> Use 'match_on' instead. #> See help(\"Deprecated\") #> Warning in mdist(z ~ data): 'mdist' is deprecated. #> Use 'match_on' instead. #> See help(\"Deprecated\") #> Warning in mdist(z ~ data): 'mdist' is deprecated. #> Use 'match_on' instead. #> See help(\"Deprecated\") #> Warning in mdist(z ~ data): 'mdist' is deprecated. #> Use 'match_on' instead. #> See help(\"Deprecated\") #> Warning in mdist(z ~ data): 'mdist' is deprecated. #> Use 'match_on' instead. #> See help(\"Deprecated\") #> Warning in mdist(z ~ data): 'mdist' is deprecated. #> Use 'match_on' instead. #> See help(\"Deprecated\") #> Warning in mdist(z ~ data): 'mdist' is deprecated. #> Use 'match_on' instead. #> See help(\"Deprecated\") #> Warning in mdist(z ~ data): 'mdist' is deprecated. #> Use 'match_on' instead. #> See help(\"Deprecated\") #> Warning in xy.coords(x, y, xlabel, ylabel, log): 3 y values <= 0 omitted from #> logarithmic plot"},{"path":"https://markmfredrickson.github.io/optmatch/dev/articles/performance.html","id":"environment","dir":"Articles","previous_headings":"","what":"Environment","title":"Performance Testing","text":"","code":"sessionInfo()"},{"path":"https://markmfredrickson.github.io/optmatch/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ben Hansen. Author. Mark Fredrickson. Author. Josh Errickson. Maintainer, author. Josh Buckner. Author. Adam Rauh. Contributor.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hansen, B.B. Klopfer, S.O. (2006) Optimal full matching related designs via network flows, JCGS 15 609-627.","code":"@Article{,   author = {Ben B. Hansen and Stephanie Olsen Klopfer},   title = {Optimal full matching and related designs via network flows},   keywords = {matched sampling, minimum cost flow, nonrandom treatment assignment, observational study, quasiexperiment, subclassification},   journal = {Journal of Computational and Graphical Statistics},   volume = {15},   number = {3},   pages = {609--627},   year = {2006}, }"},{"path":"https://markmfredrickson.github.io/optmatch/dev/index.html","id":"optmatch-optimal-fullmatching-for-r","dir":"","previous_headings":"","what":"Functions for Optimal Matching","title":"Functions for Optimal Matching","text":"Package website: release | development optmatch package implements optimal full matching algorithm bipartite matching problems. Given matrix describing distances two groups (one group represented row entries, column entries), algorithm finds matching units minimizes average within grouped distances. algorithm popular choice covariate balancing applications (e.g. propensity score matching), also can useful design stage applications blocking. application implementation, see: optmatch available CRAN:","code":"Hansen, B.B. and Klopfer, S.O. (2006) Optimal full matching and  related designs via network flows, JCGS 15 609-627. > install.packages(\"optmatch\") > library(\"optmatch\")"},{"path":"https://markmfredrickson.github.io/optmatch/dev/index.html","id":"choice-of-solvers","dir":"","previous_headings":"","what":"Choice of solvers","title":"Functions for Optimal Matching","text":"two different packages implementing actual solver can used. default, starting 0.10.0, LEMON graph library’s Min Cost Flow solver, implemented rlemon package. previous versions, default RELAX-IV solver, now implemented rrelaxiv package. Users wishing utilize RELAX-IV solver must install rrelaxiv separately, see page details. installed, RELAX-IV becomes default solver. LEMON solver four separate algorithms implemented, Cycle Cancelling (default), Network Simplex, Cost Scaling, Capacity Scaling. trade-offs performance quirks. See help(fullmatch) details choose used.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/index.html","id":"using-optmatch","dir":"","previous_headings":"","what":"Using optmatch","title":"Functions for Optimal Matching","text":"addition optimal full matching algorithm, package contains useful functions generating distance specifications, combining editing distance specifications, summarizing displaying matches. walk shows use tools matching workflow.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/index.html","id":"simulated-data","dir":"","previous_headings":"Using optmatch","what":"Simulated data","title":"Functions for Optimal Matching","text":"start, let’s generate simulated data. two groups, “treated” “control” groups. Without knowledge, nature assigned units pool one two groups. probability treated unit depends covariates. vector Z, let 1 denote treated units 0 denote control units can see simple table plot, groups balanced covariates, (expectation) randomly assigned treatment. next steps use covariates pair similar treated control units. assessing amount severity imbalance groups observed covariates, see RItools R package.","code":"set.seed(20120111) # set this to get the exact same answers as I do n <- 26 # chosen so we can divide the alphabet in half W <- data.frame(w1 = rbeta(n, 4, 2), w2 = rbinom(n, 1, p = .33))  # nature assigns to treatment tmp <- numeric(n) tmp[sample(1:n, prob = W$w1^(1 + W$w2), size = n/2)] <- 1 W$z <- tmp  # for convenience, let's give the treated units capital letter names tmp <- character(n) tmp[W$z == 1] <- LETTERS[1:(n/2)] tmp[W$z == 0] <- letters[(26 - n/2 + 1):26] rownames(W) <- tmp table(W$w2, W$z) library(lattice) ; densityplot(W$w1, groups = W$z)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/index.html","id":"setting-up-distances","dir":"","previous_headings":"Using optmatch","what":"Setting up distances","title":"Functions for Optimal Matching","text":"two groups different, different individual treated units individual control units? answering question, produce several distance specifications: matrices treated units (rows) control units (columns) entries denoting distances. optmatch provides several ways generating matrices don’t hand. Let’s begin simple Euclidean distance space defined W: method argument tells match_on function compute distances space defined formula. default method extends simple Euclidean distance rescaling distances covariance variables, Mahalanobis distance: can write additional distance computation functions. See documentation match_on details create functions. create distances, also try regressing treatment indicator covariates computing difference distance treated control pair. make process easier, match_on methods glm objects (big data problems, bigglm objects): glm method wrapper around numeric method match_on. numeric method takes vector scores (example, linear prediction unit model) vector indicating treatment status (z) unit. method returns absolute difference treated control pair scores (additionally, glm method rescales data invoking numeric method). wish fit “caliper” distance matrix, hard limit allowed distances treated control units, can pass caliper argument, scalar numeric value. treated control pair larger caliper value replaced Inf, unmatchable value. caliper argument also applies glm method. Calipers covered detail next section. final convenience method match_on using arbitrary function. function probably useful advanced users optmatch. See documentation match_on function details write arbitrary computation functions.","code":"distances <- list() distances$euclid <- match_on(z ~ w1 + w2, data = W, method = \"euclidean\") distances$mahal <- match_on(z ~ w1 + w2, data = W) propensity.model <- glm(z ~ w1 + w2, data = W, family =   binomial()) distances$propensity <- match_on(propensity.model)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/index.html","id":"combining-and-editing-distances","dir":"","previous_headings":"Using optmatch","what":"Combining and editing distances","title":"Functions for Optimal Matching","text":"created several representations matching problem, using Euclidean distance, Mahalanobis distance, estimated propensity score, arbitrary function. can combine distances single metric using standard arithmetic functions: may find convenient work smaller pieces first stitch results together bigger distance. rbind cbind functions let us add additional treated control entries distance specification existing control treated units, respectively. example, might want combine Mahalanobis score units n s propensity score units t z: exactMatch function creates “stratified” matching problems, subgroups completely separate. matching problems often much easier solve problems treated unit connected control unit. another method creating reduced matching problems. caliper function compares entry existing distance specification disallows larger specified value. example, can trim previous combined distance anything smaller median value: Like exactMatch function, results caliper used sparse matrix representation mentioned , can efficient large, sparse problems. noted previously, using glm numeric methods match_on, passing caliper’s width caliper argument can efficient.","code":"distances$all <- with(distances, euclid + mahal + propensity) W.n.to.s <- W[c(LETTERS[1:13], letters[14:19]),] W.t.to.z <- W[c(LETTERS[1:13], letters[20:26]),] mahal.n.to.s <- match_on(z ~ w1 + w2, data = W.n.to.s) ps.t.to.z <- match_on(glm(z ~ w1 + w2, data = W.t.to.z, family = binomial())) distances$combined <- cbind(mahal.n.to.s, ps.t.to.z) distances$median.caliper <- caliper(distances$all, median(distances$all)) distances$all.trimmed <- with(distances, all + median.caliper)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/index.html","id":"speeding-up-computation","dir":"","previous_headings":"Using optmatch","what":"Speeding up computation","title":"Functions for Optimal Matching","text":"addition space advantages storing finite entries sparse matrix, results exactMatch caliper can used speed computation new distances. match_on function saw earlier argument called within helps filter resulting computation finite entries within matrix. Since exactMatch caliper use finite entries denote valid pairs, make excellent sources within argument. Instead creating entire Euclidean distance matrix filtering cross-strata matches, use results exactMatch compute interesting cases: Users previous versions optmatch may notice within argument similar old structure.formula argument. Like within, structure.formula focused distance within strata pairs. Unlike structure.formula, within argument allows using distance specification argument, including created caliper. example, Mahalanobis distance computed units differ less one propensity score.","code":"tmp <- exactMatch(z ~ w2, data = W) distances$exact <- match_on(z ~ w1, data = W, within = tmp) distances$mahal.trimmed <- match_on(z ~ w1 + w2, data = W,   within = match_on(propensity.model, caliper = 1))"},{"path":"https://markmfredrickson.github.io/optmatch/dev/index.html","id":"generating-the-match","dir":"","previous_headings":"Using optmatch","what":"Generating the match","title":"Functions for Optimal Matching","text":"Now generated several distances specifications, let’s put use. simplest way evaluate distances specifications: result matching process named factor, names correspond units (treated control) levels factors matched groups. Including data argument highly recommended. argument make sure result fullmatch order original data.frame used build distance specification. make appending results fullmatch original data.frame much convenient. fullmatch function several arguments fine tuning allowed ratio treatment control units match, much pool throw away unmatchable. One common pattern arguments pairs: one treated one control unit. every distance specification amendable pattern (e.g. treated units control units exactMatch created stratum). However, can done Mahalanobis distance matrix created earlier: Like fullmatch, pairmatch also allows fine tuning ratio matches allow larger groupings. can helpful computes percentage group throw away, giving better odds successfully finding matching solution. one generated match, may wish view results. results calls fullmatch pairmatch produce optmatch objects (specialized factors). object special option print method groups units factor level: wish join match factor back original data.frame: Make sure include data argument fullmatch pairmatch, otherwise results guaranteed order original data.frame matrix.","code":"matches <- lapply(distances, function(x) { fullmatch(x, data = W) }) mahal.match <- pairmatch(distances$mahal, data = W) print(mahal.match, grouped = T) W.matched <- cbind(W, matches = mahal.match)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/index.html","id":"using-a-development-version-of-optmatch","dir":"","previous_headings":"","what":"Using a development version of Optmatch","title":"Functions for Optimal Matching","text":"section help get latest development version optmatch start using latest features. starting, know branch wish install. Currently, “master” branch main code base. Additional features added branches. list branches available (optmatch project page)[https://github.com/markmfredrickson/optmatch].","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/index.html","id":"installing-a-development-version","dir":"","previous_headings":"Using a development version of Optmatch","what":"Installing a development version","title":"Functions for Optimal Matching","text":"may need additional compilers distributed CRAN: OS X, Windows. recommend using dev_mode devtools package install -development version package can keep current CRAN version primary package. Activating dev_mode creates secondary library packages can accessed dev_mode. Packages normally installed can still used, different versions installed normally dev_mode, dev_mode version takes precedent dev_mode. Install load devtools package: Activate dev_mode: Note prompt changes > d> let know ’re dev_mode. Now choose development branch want use. install master: Either way, package loaded usual fashion, provided ’re still dev_mode: ’ve done can disable dev_mode follows development version package remains loaded. Note load package – ie, enter library(optmatch) (package hasn’t already loaded otherwise) – dev_mode, ’ll get whatever version package may installed library tree, development version. want switch versions optmatch, suggest re-starting R.","code":"> install.packages(\"devtools\") > library(\"devtools\") > dev_mode() d> d> install_github(\"markmfredrickson/optmatch\") d> library(optmatch) d> dev_mode() >"},{"path":"https://markmfredrickson.github.io/optmatch/dev/index.html","id":"developing-for-optmatch","dir":"","previous_headings":"","what":"Developing for optmatch","title":"Functions for Optimal Matching","text":"may use RStudio develop optmatch, opening optmatch.Rproj file. suggest ensure required dependencies installed running {r} devtools::install_deps(dependencies = TRUE) prefer changes include unit tests demonstrating problem showing new feature added. test suite uses testthat package write run tests. (Please ensure latest version testthat (least v0.11.0), older versions stored tests different directory, may test properly.) See tests/testthat directory examples. can run test suite via Build -> Test Package. New features include inline Roxygen documentation. can generate .Rd documents Roxygen code using Build -> Document. Finally, can use Build -> Build Reload Build -> Clean Rebuild load updated version optmatch current RStudio session. Alternatively, install developed version permanently, use Build -> Build Binary Version, followed {r} install.packages(\"../optmatch_VERSION.tgz\", repo=NULL) can revert back current CRAN version {r} remove.packages(\"optmatch\") install.packages(\"optmatch\") Note: building release CRAN, need ensure vignettes compacted. enabled automatically .Rproj file, see stackoverflow answer concerns dealing RStudio. prefer use RStudio, can develop using Make. make test: Run full test suite. make document: Update documentation Roxygen inline comments. make interactive: Start interactive session optmatch loaded. (make interactive-emacs start session inside emacs.) make check: Run R CMD check package make build: Build binary package. make vignette: Builds vignettes vignettes/ directory make clean: Removes files built make vignette, make document make check. generally necessary, can useful debugging. make release: Starts interactive R session submit release CRAN. change ready, make pull request github.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/BlockedInfinitySparseMatrix-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Blocked Infinity Sparse Matrix — BlockedInfinitySparseMatrix-class","title":"Blocked Infinity Sparse Matrix — BlockedInfinitySparseMatrix-class","text":"Blocked Infinity Sparse Matrices similar Infinity Sparse Matrices, also keep track groups units via additional slot, groups","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/BlockedInfinitySparseMatrix-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Blocked Infinity Sparse Matrix — BlockedInfinitySparseMatrix-class","text":"groups factor vector containing groups, unit names labels, possible colnames vector containing names control units. either character vector NULL units names rownames vector containing names treated units. either character vector NULL units names cols vector integers corresponding control units rows vector integers corresponding treated units dimension integer vector containing number treated control units, order call function call used create InfinitySparseMatrix","code":""},{"path":[]},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/BlockedInfinitySparseMatrix-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Blocked Infinity Sparse Matrix — BlockedInfinitySparseMatrix-class","text":"Mark M. Fredrickson","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/InfinitySparseMatrix-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects for sparse matching problems. — InfinitySparseMatrix-class","title":"Objects for sparse matching problems. — InfinitySparseMatrix-class","text":"InfinitySparseMatrix special class distance specifications. Finite entries indicate possible matches, infinite NA entries indicated non-allowed matches. data type can space efficient sparse matching problems. Usually, users create distance specification using match_on, caliper, exactMatch. ordering units InfinitySparseMatrix guaranteed maintained subsetting /operations performed.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/InfinitySparseMatrix-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Objects for sparse matching problems. — InfinitySparseMatrix-class","text":"colnames vector containing names control units. either character vector NULL units names rownames vector containing names treated units. either character vector NULL units names cols vector integers corresponding control units rows vector integers corresponding treated units dimension integer vector containing number treated control units, order call function call used create InfinitySparseMatrix","code":""},{"path":[]},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/InfinitySparseMatrix-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Objects for sparse matching problems. — InfinitySparseMatrix-class","text":"Mark M. Fredrickson","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/LEMON.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Helper function for accessing algorithms in LEMON solver — LEMON","title":"(Internal) Helper function for accessing algorithms in LEMON solver — LEMON","text":"(Internal) Helper function accessing algorithms LEMON solver","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/LEMON.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Helper function for accessing algorithms in LEMON solver — LEMON","text":"","code":"LEMON(algorithm = \"CycleCancelling\")"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/LEMON.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Helper function for accessing algorithms in LEMON solver — LEMON","text":"algorithm LEMON algorithm use. Choices \"CycleCancelling\", \"CapacityScaling\", \"CostScaling\", \"NetworkSimplex\". Default \"CycleCancelling\".","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/LEMON.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Helper function for accessing algorithms in LEMON solver — LEMON","text":"String form \"LEMON.<algorithm>\"","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/antiExactMatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify a matching problem where units in a common factor cannot be matched. — antiExactMatch","title":"Specify a matching problem where units in a common factor cannot be matched. — antiExactMatch","text":"function builds distance specification treated units infinitely far away control units share level given factor variable. can useful ensuring matched groups come qualitatively different groups.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/antiExactMatch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify a matching problem where units in a common factor cannot be matched. — antiExactMatch","text":"","code":"antiExactMatch(x, z)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/antiExactMatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify a matching problem where units in a common factor cannot be matched. — antiExactMatch","text":"x factor across matches allowed. z logical binary vector length x indicating treatment control unit study. TRUE 1 represents treatment unit, FALSE 0 represents control unit. NA units excluded.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/antiExactMatch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify a matching problem where units in a common factor cannot be matched. — antiExactMatch","text":"distance specification encodes across factor level constraint.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/antiExactMatch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Specify a matching problem where units in a common factor cannot be matched. — antiExactMatch","text":"exactMatch function provides way specifying matching problem units within factor level may matched. function provides reverse scenario: matching problem units across factor levels permitted match. Like exactMatch, results function often used within argument match_on another distance specification creation function limit scope final distance specification (.e., disallowing match units value factor variable x).","code":""},{"path":[]},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/antiExactMatch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify a matching problem where units in a common factor cannot be matched. — antiExactMatch","text":"","code":"data(nuclearplants)  # force entries to be within the same factor: em <- fullmatch(exactMatch(pr ~ pt, data = nuclearplants), data = nuclearplants) table(nuclearplants$pt, em) #>    em #>     0.1 0.2 0.3 0.4 0.5 0.6 0.7 1.1 1.2 1.3 #>   0   2   2   2   2   2   2  14   0   0   0 #>   1   0   0   0   0   0   0   0   2   2   2  # force treated and control units to have different values of `pt`: z <- nuclearplants$pr names(z) <- rownames(nuclearplants) aem <- fullmatch(antiExactMatch(nuclearplants$pt, z), data = nuclearplants) table(nuclearplants$pt, aem) #>    aem #>     1.1 1.10 1.2 1.3 1.8 1.9 #>   0   4   16   1   2   2   1 #>   1   1    1   1   1   1   1"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/as.InfinitySparseMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object to InfinitySparseMatrix — as.InfinitySparseMatrix","title":"Convert an object to InfinitySparseMatrix — as.InfinitySparseMatrix","text":"Convert object InfinitySparseMatrix","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/as.InfinitySparseMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object to InfinitySparseMatrix — as.InfinitySparseMatrix","text":"","code":"as.InfinitySparseMatrix(x)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/as.InfinitySparseMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object to InfinitySparseMatrix — as.InfinitySparseMatrix","text":"x object can coerced InfinitySparseMatrix, typically matrix.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/as.InfinitySparseMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object to InfinitySparseMatrix — as.InfinitySparseMatrix","text":"InfinitySparseMatrix","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/as.list.BlockedInfinitySparseMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Splits a BlockedInfinitySparseMatrix into a list of InfinitySparseMatrices — as.list.BlockedInfinitySparseMatrix","title":"Splits a BlockedInfinitySparseMatrix into a list of InfinitySparseMatrices — as.list.BlockedInfinitySparseMatrix","text":"Splits BlockedInfinitySparseMatrix list   InfinitySparseMatrices","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/as.list.BlockedInfinitySparseMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Splits a BlockedInfinitySparseMatrix into a list of InfinitySparseMatrices — as.list.BlockedInfinitySparseMatrix","text":"","code":"# S3 method for class 'BlockedInfinitySparseMatrix' as.list(x, ...)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/as.list.BlockedInfinitySparseMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Splits a BlockedInfinitySparseMatrix into a list of InfinitySparseMatrices — as.list.BlockedInfinitySparseMatrix","text":"x BlockedInfinitySparseMatrix ... Ignored","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/as.list.BlockedInfinitySparseMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Splits a BlockedInfinitySparseMatrix into a list of InfinitySparseMatrices — as.list.BlockedInfinitySparseMatrix","text":"list InfinitySparseMatrices","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/c.optmatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine Optmatch objects — c.optmatch","title":"Combine Optmatch objects — c.optmatch","text":"Combine Optmatch objects","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/c.optmatch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine Optmatch objects — c.optmatch","text":"","code":"# S3 method for class 'optmatch' c(...)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/c.optmatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine Optmatch objects — c.optmatch","text":"... Optmatch objects concatenated","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/c.optmatch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine Optmatch objects — c.optmatch","text":"combined Optmatch object","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/caliper-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare matching distances suitable for matching within calipers. — caliper","title":"Prepare matching distances suitable for matching within calipers. — caliper","text":"Encodes calipers, maximum allowable distances within match. result call caliper distance specification treated control units can used pairmatch() fullmatch(). Calipers can also combined distance specifications richer matching problems.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/caliper-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare matching distances suitable for matching within calipers. — caliper","text":"","code":"caliper(x, width, exclude = c(), compare = `<=`, values = FALSE)  # S4 method for class 'InfinitySparseMatrix' caliper(x, width, exclude = c(), compare = `<=`, values = FALSE)  # S4 method for class 'matrix' caliper(x, width, exclude = c(), compare = `<=`, values = FALSE)  # S4 method for class 'optmatch.dlist' caliper(x, width, exclude = c(), compare = `<=`, values = FALSE)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/caliper-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare matching distances suitable for matching within calipers. — caliper","text":"x distance specification created match_on similar. width width caliper: wide margin allow matches. careful setting width. Vector valued arguments recycled finite entries x (order guaranteed x types distance objects). exclude (Optional) character vector observations (corresponding row column names) exclude caliper. compare function decides whether two observations caliper. default `<=`. `<` common alternative. values returned object made zeros (values = FALSE, default) object include values original object (values = TRUE)?","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/caliper-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare matching distances suitable for matching within calipers. — caliper","text":"matrix like object suitable given distance argument fullmatch pairmatch. caliper zeros Inf values, indicating possible match possible match, respectively. can combine results caliper distances using `+` operator. See examples usage.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/caliper-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare matching distances suitable for matching within calipers. — caliper","text":"caliper generic function methods allowed distance specifications: user created matrices, results match_on, results exactMatch, combinations (using `+`) objects. width provides size caliper, allowable distance matching. distance treated control pair less equal distance, allowed kept; otherwise, pair discarded future matching. default comparison \"equal less can\" changed comparison function using comparison argument. important understand width argument defined scale distances. univariate distances propensity scores, common specify calipers standard deviations. caliper nature desired, must either find standard deviation directly use match_on function caliper argument. Since match_on access underlying univariate scores, example GLM method, can determine caliper width standard deviations. wish exclude specific units caliper requirements, pass names units exclude argument. units allowed match unit.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/caliper-methods.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Prepare matching distances suitable for matching within calipers. — caliper","text":"P.~R. Rosenbaum D.~B. Rubin (1985), ‘Constructing control group using multivariate matched sampling   methods incorporate propensity score’,  American Statistician, 39 33–38.","code":""},{"path":[]},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/caliper-methods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Prepare matching distances suitable for matching within calipers. — caliper","text":"Mark M. Fredrickson Ben B. Hansen","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/caliper-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare matching distances suitable for matching within calipers. — caliper","text":"","code":"data(nuclearplants)   ### Caliper of 100 MWe on plant capacity caliper(match_on(pr~cap, data=nuclearplants, method=\"euclidean\"), width=100) #>        control #> treated   H   I   J   K   L   M   N   O   P   Q   R   S   T   U   V   W   X   Y #>       A Inf   0   0 Inf Inf Inf Inf Inf Inf Inf   0 Inf Inf Inf   0 Inf Inf Inf #>       B Inf   0   0 Inf Inf Inf Inf Inf Inf Inf   0 Inf Inf Inf   0 Inf Inf Inf #>       C Inf Inf Inf Inf   0 Inf   0 Inf   0 Inf Inf   0   0   0 Inf   0   0 Inf #>       D Inf Inf Inf   0 Inf   0 Inf   0 Inf   0 Inf Inf Inf Inf Inf Inf Inf   0 #>       E Inf   0   0 Inf Inf Inf Inf Inf Inf Inf   0 Inf Inf Inf   0 Inf Inf Inf #>       F Inf Inf Inf Inf   0 Inf   0 Inf   0 Inf Inf   0   0   0 Inf   0   0 Inf #>       G Inf Inf Inf Inf   0 Inf   0 Inf   0 Inf Inf   0   0   0 Inf   0   0 Inf #>       a Inf Inf Inf Inf   0 Inf   0 Inf   0 Inf Inf   0 Inf   0 Inf   0   0 Inf #>       b   0 Inf Inf Inf   0 Inf   0 Inf   0 Inf Inf Inf   0   0 Inf Inf   0 Inf #>       c Inf Inf Inf Inf   0 Inf   0 Inf   0 Inf Inf   0 Inf   0 Inf   0   0 Inf #>        control #> treated   Z   d   e   f #>       A   0 Inf Inf Inf #>       B   0 Inf Inf Inf #>       C Inf   0   0   0 #>       D Inf Inf Inf Inf #>       E   0 Inf Inf Inf #>       F Inf   0   0   0 #>       G Inf   0   0   0 #>       a Inf Inf   0   0 #>       b Inf   0   0 Inf #>       c Inf Inf   0   0  ### Caliper of 1/2 a pooled SD of plant capacity caliper(match_on(pr~cap, data=nuclearplants), width=.5) #>        control #> treated   H   I   J   K   L   M   N   O   P   Q   R   S   T   U   V   W   X   Y #>       A Inf   0   0 Inf Inf Inf Inf Inf Inf Inf   0 Inf Inf Inf   0 Inf Inf Inf #>       B Inf   0   0 Inf Inf Inf Inf Inf Inf Inf   0 Inf Inf Inf   0 Inf Inf Inf #>       C Inf Inf Inf Inf   0 Inf   0 Inf   0 Inf Inf   0   0   0 Inf   0   0 Inf #>       D Inf Inf Inf   0 Inf   0 Inf   0 Inf   0 Inf Inf Inf Inf Inf Inf Inf   0 #>       E Inf   0   0 Inf Inf Inf Inf Inf Inf Inf   0 Inf Inf Inf   0 Inf Inf Inf #>       F Inf Inf Inf Inf   0 Inf   0 Inf   0 Inf Inf   0   0   0 Inf   0   0 Inf #>       G Inf Inf Inf Inf   0 Inf   0 Inf   0 Inf Inf   0   0   0 Inf   0   0 Inf #>       a Inf Inf Inf Inf   0 Inf   0 Inf Inf Inf Inf   0 Inf   0 Inf   0 Inf Inf #>       b   0 Inf Inf Inf   0 Inf   0 Inf   0 Inf Inf Inf   0 Inf Inf Inf   0 Inf #>       c Inf Inf Inf Inf   0 Inf   0 Inf Inf Inf Inf   0 Inf   0 Inf   0 Inf Inf #>        control #> treated   Z   d   e   f #>       A   0 Inf Inf Inf #>       B   0 Inf Inf Inf #>       C Inf   0   0   0 #>       D Inf Inf Inf Inf #>       E   0 Inf Inf Inf #>       F Inf   0   0   0 #>       G Inf   0   0   0 #>       a Inf Inf   0   0 #>       b Inf   0   0 Inf #>       c Inf Inf   0   0  ### Caliper  of .2 pooled SDs in the propensity score ppty <- glm(pr ~ . - (pr + cost), family = binomial(), data = nuclearplants) ppty.dist <- match_on(ppty)  pptycaliper <- caliper(ppty.dist, width = .2)  ### caliper on the Mahalanobis distance caliper(match_on(pr ~ t1 + t2, data = nuclearplants), width = 3) #>        control #> treated   H   I   J   K   L M N   O   P Q   R S   T   U V   W X   Y   Z d   e #>       A Inf   0   0 Inf Inf 0 0   0 Inf 0 Inf 0   0   0 0   0 0 Inf Inf 0 Inf #>       B Inf   0   0 Inf Inf 0 0   0 Inf 0   0 0   0   0 0   0 0 Inf   0 0 Inf #>       C   0   0   0   0   0 0 0   0   0 0   0 0   0   0 0   0 0   0   0 0   0 #>       D Inf   0   0 Inf Inf 0 0   0 Inf 0   0 0   0   0 0   0 0 Inf   0 0 Inf #>       E   0   0   0   0   0 0 0   0   0 0   0 0   0   0 0   0 0   0   0 0 Inf #>       F Inf Inf Inf Inf Inf 0 0 Inf Inf 0   0 0 Inf   0 0 Inf 0   0   0 0 Inf #>       G   0   0   0   0 Inf 0 0   0 Inf 0   0 0   0   0 0   0 0   0   0 0 Inf #>       a   0   0   0   0   0 0 0   0   0 0   0 0   0   0 0   0 0   0   0 0 Inf #>       b Inf   0   0   0 Inf 0 0   0 Inf 0   0 0   0   0 0   0 0   0   0 0 Inf #>       c Inf   0   0 Inf Inf 0 0   0 Inf 0 Inf 0   0 Inf 0   0 0 Inf Inf 0 Inf #>        control #> treated   f #>       A   0 #>       B   0 #>       C   0 #>       D   0 #>       E   0 #>       F Inf #>       G   0 #>       a   0 #>       b   0 #>       c   0  ### Combining a Mahalanobis distance matching with a caliper ### of 1 pooled SD in the propensity score: mhd.pptyc <- caliper(ppty.dist, width = 1) +           match_on(pr ~ t1 + t2, data = nuclearplants) pairmatch(mhd.pptyc, data = nuclearplants) #> Warning: Matching failed. (Restrictions impossible to meet?) #>  Enter ?matchfailed for more info. #>    H    I    A    J    B    K    L    M    C    N    O    P    Q    R    S    T  #> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA>  #>    U    D    V    E    W    F    X    G    Y    Z    d    e    f    a    b    c  #> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA>   ### Excluding observations from caliper requirements: caliper(match_on(pr ~ t1 + t2, data = nuclearplants), width = 3, exclude = c(\"A\", \"f\")) #>        control #> treated   H   I   J   K   L M N   O   P Q   R S   T   U V   W X   Y   Z d   e f #>       A   0   0   0   0   0 0 0   0   0 0   0 0   0   0 0   0 0   0   0 0   0 0 #>       B Inf   0   0 Inf Inf 0 0   0 Inf 0   0 0   0   0 0   0 0 Inf   0 0 Inf 0 #>       C   0   0   0   0   0 0 0   0   0 0   0 0   0   0 0   0 0   0   0 0   0 0 #>       D Inf   0   0 Inf Inf 0 0   0 Inf 0   0 0   0   0 0   0 0 Inf   0 0 Inf 0 #>       E   0   0   0   0   0 0 0   0   0 0   0 0   0   0 0   0 0   0   0 0 Inf 0 #>       F Inf Inf Inf Inf Inf 0 0 Inf Inf 0   0 0 Inf   0 0 Inf 0   0   0 0 Inf 0 #>       G   0   0   0   0 Inf 0 0   0 Inf 0   0 0   0   0 0   0 0   0   0 0 Inf 0 #>       a   0   0   0   0   0 0 0   0   0 0   0 0   0   0 0   0 0   0   0 0 Inf 0 #>       b Inf   0   0   0 Inf 0 0   0 Inf 0   0 0   0   0 0   0 0   0   0 0 Inf 0 #>       c Inf   0   0 Inf Inf 0 0   0 Inf 0 Inf 0   0 Inf 0   0 0 Inf Inf 0 Inf 0  ### Returning values directly (equal up to the the attributes) all(abs((caliper(ppty.dist, 1) + ppty.dist) -         caliper(ppty.dist, 1, values = TRUE)) < .Machine$Double.eps) #> [1] TRUE"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/caliperSize.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Determines how many other units fall within a caliper distance — caliperSize","title":"(Internal) Determines how many other units fall within a caliper distance — caliperSize","text":"matching functions fullmatch pairmatch maximum problem size, based number comparisons treated control units. completely dense problem, every treated units compared every control unit length(treated) * length(control) comparisons. caliper restricts comparisons valid, disallowing matches treated control pairs far apart. caliper can significantly decrease size matching problem. caliperSize function reports exactly many valid treated-control comparisons remain applying caliper given width.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/caliperSize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Determines how many other units fall within a caliper distance — caliperSize","text":"","code":"caliperSize(scores, z, width, structure = NULL)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/caliperSize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Determines how many other units fall within a caliper distance — caliperSize","text":"scores numeric vector scores providing 1-D position units z Treatment indicator vector width Width caliper, must positive structure Grouping factor use computation","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/caliperSize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Determines how many other units fall within a caliper distance — caliperSize","text":"numeric Total number pairwise distances remaining caliper placed.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/caliperUpperBound.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Returns a reasonable upper bound on the arcs remaining after placing a caliper. — caliperUpperBound","title":"(Internal) Returns a reasonable upper bound on the arcs remaining after placing a caliper. — caliperUpperBound","text":"(Internal) Returns reasonable upper bound arcs remaining placing caliper.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/caliperUpperBound.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Returns a reasonable upper bound on the arcs remaining after placing a caliper. — caliperUpperBound","text":"","code":"caliperUpperBound(scores, z, width, structure = NULL)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/caliperUpperBound.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Returns a reasonable upper bound on the arcs remaining after placing a caliper. — caliperUpperBound","text":"scores numeric vector scores providing 1-D position units z Treatment indicator vector width Width caliper, must positive. structure Optional factor variable groups scores, used exactMatch. Including structure allows wider calipers.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/caliperUpperBound.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Returns a reasonable upper bound on the arcs remaining after placing a caliper. — caliperUpperBound","text":"numeric Total number pairwise distances remaining caliper placed.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/cbindrbind.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine InfinitySparseMatrices or BlockedInfinitySparseMatrices by row or column — cbind.InfinitySparseMatrix","title":"Combine InfinitySparseMatrices or BlockedInfinitySparseMatrices by row or column — cbind.InfinitySparseMatrix","text":"matches syntax semantics cbind rbind matrices.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/cbindrbind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine InfinitySparseMatrices or BlockedInfinitySparseMatrices by row or column — cbind.InfinitySparseMatrix","text":"","code":"# S3 method for class 'InfinitySparseMatrix' cbind(x, y, ...)  # S3 method for class 'InfinitySparseMatrix' rbind(x, y, ...)  # S3 method for class 'BlockedInfinitySparseMatrix' cbind(x, y, ...)  # S3 method for class 'BlockedInfinitySparseMatrix' rbind(x, y, ...)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/cbindrbind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine InfinitySparseMatrices or BlockedInfinitySparseMatrices by row or column — cbind.InfinitySparseMatrix","text":"x InfinitySparseMatrix BlockedInfinitySparseMatrix, agreeing y appropriate dimension. y InfinitySparseMatrix BlockedInfinitySparseMatrix, agreeing x appropriate dimension. ... arguments ignored.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/cbindrbind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine InfinitySparseMatrices or BlockedInfinitySparseMatrices by row or column — cbind.InfinitySparseMatrix","text":"combined InfinitySparseMatrix BlockedInfinitySparseMatrix","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/cbindrbind.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Combine InfinitySparseMatrices or BlockedInfinitySparseMatrices by row or column — cbind.InfinitySparseMatrix","text":"Mark Fredrickson","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/compare_optmatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Compares the equality of optmatch objects, ignoring attributes and group names. — compare_optmatch","title":"Compares the equality of optmatch objects, ignoring attributes and group names. — compare_optmatch","text":"checks equality two optmatch objects. bits matter unit names grouping. bits attributes, group names, order, etc ignored.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/compare_optmatch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compares the equality of optmatch objects, ignoring attributes and group names. — compare_optmatch","text":"","code":"compare_optmatch(o1, o2)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/compare_optmatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compares the equality of optmatch objects, ignoring attributes and group names. — compare_optmatch","text":"o1 First optmatch object. o2 Second optmatch object.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/compare_optmatch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compares the equality of optmatch objects, ignoring attributes and group names. — compare_optmatch","text":"TRUE two matches memberships.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/compare_optmatch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compares the equality of optmatch objects, ignoring attributes and group names. — compare_optmatch","text":"names units can differ unmatched units, e.g., units whose value optmatch object NA. matched objects differing names, automatically FALSE. Note ignores names subgroups. four members subgroups either c(\"\", \"\", \"b\", \"b\") c(\"b\", \"b\", \"\", \"\") identical call.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/dbind.html","id":null,"dir":"Reference","previous_headings":"","what":"Diagonally bind together subgroup-specific distances — dbind","title":"Diagonally bind together subgroup-specific distances — dbind","text":"function generates single block-diagonal distance matrix given several distance matrices defined subgroups.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/dbind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diagonally bind together subgroup-specific distances — dbind","text":"","code":"dbind(..., force_unique_names = FALSE)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/dbind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diagonally bind together subgroup-specific distances — dbind","text":"... number distance objects can converted InfinitySparseMatrix, class matrix, DenseMatrix, InfinitySparseMatrix, BlockedInfinitySparseMatrix, lists containing distance objects. force_unique_names Default FALSE. row column names unique among distances, FALSE, throw warning rename rows columns ensure unique names. TRUE, error non-unique names.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/dbind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diagonally bind together subgroup-specific distances — dbind","text":"BlockedInfinitySparseMatrix containing block-diagonal   distance matrix. single distance passed dbind   already BlockedInfinitySparseMatrix, result   InfinitySparseMatrix instead.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/dbind.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Diagonally bind together subgroup-specific distances — dbind","text":"generated several distances matrices subgroups analysis, may wish combine single block-diagonal distance matrix. dbind function facilitates . BlockedInfinitySparseMatrix include ... broken individual InfinitySparseMatrix joined back together. example, b BlockedInfinitySparseMatrix 2 subgroups m distance without subgroups, dbind(b, m) BlockedInfinitySparseMatrix 3 subgroups. shared names (either row column) among distances passed , default matrices renamed ensure unique names appending \"X.\" distance, \"X\" ascending lower case letters (\".\", \"b.\", etc). Setting force_unique_names argument TRUE errors instead. matrices need renamed 26 separate matrices, first 26 single \"X.\" prefixs, continue \"YX.\", e.g \"aa.\", \"ab.\", \"ac.\". 676 separate matrices, prefix wil continue \"ZYX.\", e.g. \"aaa.\", \"aab.\", \"aac.\". scheme supports 18,278 unique matrices. Note combine subgroup distances single blocked distance using function ultimately obtain single matching set. Instead, take look vignette vignette(\"matching-within-subgroups\", package = \"optmatch\") details combining multiple matches.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/dbind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diagonally bind together subgroup-specific distances — dbind","text":"","code":"data(nuclearplants) m1 <- match_on(pr ~ cost, data = subset(nuclearplants, pt == 0),                caliper = 1) m2 <- match_on(pr ~ cost, data = subset(nuclearplants, pt == 1),                caliper = 1.3) blocked <- dbind(m1, m2)  dists <- list(m1, m2)  blocked2 <- dbind(dists) identical(blocked, blocked2) #> [1] TRUE"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/dimnames-InfinitySparseMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set dimnames for InfinitySparseMatrix objects — dimnames,InfinitySparseMatrix-method","title":"Get and set dimnames for InfinitySparseMatrix objects — dimnames,InfinitySparseMatrix-method","text":"InfinitySparseMatrix objects represent sparse matching problems treated units rows matrix controls units columns matrix. names units can retrieved set using methods.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/dimnames-InfinitySparseMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set dimnames for InfinitySparseMatrix objects — dimnames,InfinitySparseMatrix-method","text":"","code":"# S4 method for class 'InfinitySparseMatrix' dimnames(x)  # S4 method for class 'InfinitySparseMatrix,list' dimnames(x) <- value  # S4 method for class 'InfinitySparseMatrix,NULL' dimnames(x) <- value"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/dimnames-InfinitySparseMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set dimnames for InfinitySparseMatrix objects — dimnames,InfinitySparseMatrix-method","text":"x InfinitySparseMatrix object. value list two entries: treated names control names, respectively.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/dimnames-InfinitySparseMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get and set dimnames for InfinitySparseMatrix objects — dimnames,InfinitySparseMatrix-method","text":"list treated control names.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/distUnion.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine multiple distance specifications into a single distance specification. — distUnion","title":"Combine multiple distance specifications into a single distance specification. — distUnion","text":"Creates new distance specification union two distance specifications. constituent distances specifications may overlapping treated control units (identified rownames colnames respectively).","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/distUnion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine multiple distance specifications into a single distance specification. — distUnion","text":"","code":"distUnion(...)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/distUnion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine multiple distance specifications into a single distance specification. — distUnion","text":"... distance specifications (created match_on, exactMatch, distance creation function).","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/distUnion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine multiple distance specifications into a single distance specification. — distUnion","text":"InfinitySparseMatrix object treated control units arguments combined. Duplicate entries resolved favor earliest argument (e.g., distUnion(, B) favor entries entries B).","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/distUnion.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine multiple distance specifications into a single distance specification. — distUnion","text":"combining multiple distance specifications common controls, different treated units, rbind provides way combine different objects. Likewise, cbind provides way combine distance specifications common treated units, different control units. distUnion can combine distance units common treated control units coherent single distance object. duplicate treated-control entries multiple input distances, first entry used.","code":""},{"path":[]},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/edgelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Create EdgeList object — edgelist","title":"Create EdgeList object — edgelist","text":"y named character vector, names correspond whatever x otherwise (.e. y NULL) translate levels set nodes-representing columns, values give new levels.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/edgelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create EdgeList object — edgelist","text":"","code":"edgelist(x, y = NULL)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/edgelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create EdgeList object — edgelist","text":"x object convert edgelist y named character vector giving levels nodes-representing columns, NULL","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/edgelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create EdgeList object — edgelist","text":"EdgeList","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/edgelist.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create EdgeList object — edgelist","text":"Ben Hansen","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/effectiveSampleSize.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the effective sample size of a match. — effectiveSampleSize","title":"Compute the effective sample size of a match. — effectiveSampleSize","text":"effective sample size sum harmonic means number units treatment control matched group. k matched pairs, effective sample size k. matched groups become unbalanced, effective sample size decreases.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/effectiveSampleSize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the effective sample size of a match. — effectiveSampleSize","text":"","code":"effectiveSampleSize(x, z = NULL)  # S3 method for class 'factor' effectiveSampleSize(x, z = NULL)  # Default S3 method effectiveSampleSize(x, z = NULL)  # S3 method for class 'table' effectiveSampleSize(x, z = NULL)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/effectiveSampleSize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the effective sample size of a match. — effectiveSampleSize","text":"x optmatch object, result fullmatch pairmatch. z treatment indicator, vector length match. required match object contain contrast.group' attribute.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/effectiveSampleSize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the effective sample size of a match. — effectiveSampleSize","text":"equivalent number pairs match.","code":""},{"path":[]},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/evaluate_primal.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute value of primal problem given flows and arc costs — evaluate_primal","title":"Compute value of primal problem given flows and arc costs — evaluate_primal","text":"Compute value primal problem given flows arc costs","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/evaluate_primal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute value of primal problem given flows and arc costs — evaluate_primal","text":"","code":"evaluate_primal(distances, solution)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/evaluate_primal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute value of primal problem given flows and arc costs — evaluate_primal","text":"distances InfinitySparseMatrix giving distances solution MCFSolutions object","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/evaluate_primal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute value of primal problem given flows and arc costs — evaluate_primal","text":"value primal problem, .e. sum products distances flow along arcs solution","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/evaluate_primal.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute value of primal problem given flows and arc costs — evaluate_primal","text":"Hansen","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/exactMatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an exact matching set of subproblems. — exactMatch","title":"Generate an exact matching set of subproblems. — exactMatch","text":"exact match one based factor. Within level, observations allowed matched. exact match can combined another distance matrix create set matching subproblems.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/exactMatch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an exact matching set of subproblems. — exactMatch","text":"","code":"exactMatch(x, ...)  # S4 method for class 'vector' exactMatch(x, treatment)  # S4 method for class 'formula' exactMatch(x, data = NULL, subset = NULL, na.action = NULL, ...)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/exactMatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an exact matching set of subproblems. — exactMatch","text":"x factor vector formula, used select method. ... Additional arguments methods. treatment logical binary vector length x indicating treatment control unit study. TRUE 1 represents treatment unit, FALSE 0 represents control unit. NA units excluded. data data.frame matrix contains variables used formula x. subset optional vector specifying subset observations used na.action function indicates happen data contain NAs","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/exactMatch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate an exact matching set of subproblems. — exactMatch","text":"matrix like object, suitable given   distance argument fullmatch   pairmatch. exact match zeros   Inf values, indicating possible match possible   match, respectively. can added another distance matrix   create subclassed matching problem.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/exactMatch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate an exact matching set of subproblems. — exactMatch","text":"exactMatch creates block diagonal matrix 0s Infs. pairs 0 entries within level factor legitimate matches.  Inf indicates units different levels. exactMatch replaces structure.fmla argument several functions previous versions optmatch.  factor method, two vectors x treatment must length. vector x interpreted indicating grouping factors data, vector treatment indicates whether unit treatment control groups.  least one two vectors must names.  formula method, data argument may omitted, case method attempts find variables environment function called. behavior, arguments subset na.action, mimics behavior lm.","code":""},{"path":[]},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/exactMatch.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate an exact matching set of subproblems. — exactMatch","text":"Mark M. Fredrickson","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/exactMatch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate an exact matching set of subproblems. — exactMatch","text":"","code":"data(nuclearplants)  ### First generate a standard propensity score ppty <- glm(pr~.-(pr+cost), family = binomial(), data = nuclearplants) ppty.distances <- match_on(ppty)  ### Only allow matches within the partial turn key plants pt.em <- exactMatch(pr ~ pt, data = nuclearplants) as.matrix(pt.em) #>        control #> treated   H   I   J   K   L   M   N   O   P   Q   R   S   T   U   V   W   X   Y #>       A   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 #>       B   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 #>       C   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 #>       D   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 #>       E   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 #>       F   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 #>       G   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 #>       a Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf #>       b Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf #>       c Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf #>        control #> treated   Z   d   e   f #>       A   0 Inf Inf Inf #>       B   0 Inf Inf Inf #>       C   0 Inf Inf Inf #>       D   0 Inf Inf Inf #>       E   0 Inf Inf Inf #>       F   0 Inf Inf Inf #>       G   0 Inf Inf Inf #>       a Inf   0   0   0 #>       b Inf   0   0   0 #>       c Inf   0   0   0  ### Blunt matches: match.pt.em <- fullmatch(pt.em) #> Warning: Without 'data' argument the order of the match is not guaranteed #>     to be the same as your original data. print(match.pt.em, grouped = TRUE) #>  Group                                  Members #>    0.1                                     A, Z #>    0.2                                     B, Y #>    0.3                                     C, X #>    0.4                                     D, W #>    0.5                                     E, V #>    0.6                                     F, U #>    0.7 G, H, I, J, K, L, M, N, O, P, Q, R, S, T #>    1.1                                     a, f #>    1.2                                     b, e #>    1.3                                     c, d  ### Combine the propensity scores with the subclasses: match.ppty.em <- fullmatch(ppty.distances + pt.em) #> Warning: Without 'data' argument the order of the match is not guaranteed #>     to be the same as your original data. print(match.ppty.em, grouped = TRUE) #>  Group                                        Members #>    0.1                                     A, D, F, V #>    0.2                                        B, G, U #>    0.3 C, H, J, K, L, M, N, O, P, Q, R, T, W, X, Y, Z #>    0.5                                        E, I, S #>    1.1                                           a, d #>    1.2                                           b, f #>    1.3                                           c, e"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/fill.NAs.html","id":null,"dir":"Reference","previous_headings":"","what":"Create missingness indicator variables and non-informatively fill in missing values — fill.NAs","title":"Create missingness indicator variables and non-informatively fill in missing values — fill.NAs","text":"Given data.frame formula data, fill.NAs() returns expanded data frame, including new missingness flag variable missing values replacing missing entry value representing reasonable default missing values column.  Functions formula supported, transformations happening NA replacement.  expanded data frame useful propensity modeling balance checking covariates missing values.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/fill.NAs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create missingness indicator variables and non-informatively fill in missing values — fill.NAs","text":"","code":"fill.NAs(x, data = NULL, all.covs = FALSE, contrasts.arg = NULL)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/fill.NAs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create missingness indicator variables and non-informatively fill in missing values — fill.NAs","text":"x Can either data frame (case data argument NULL) formula (case data must data.frame) data x formula, must data.frame. Otherwise ignored. .covs response variable imputed? formula x, variable left hand side. data.frame x, response considered first column. contrasts.arg (model.matrix) list, whose entries values (numeric matrices character strings naming functions) used replacement values contrasts replacement function whose names names columns data containing factors.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/fill.NAs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create missingness indicator variables and non-informatively fill in missing values — fill.NAs","text":"data.frame NA values replaced   mean values additional indicator columns column   including missing values. Suitable directly passing   lm model building functions build   propensity scores.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/fill.NAs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create missingness indicator variables and non-informatively fill in missing values — fill.NAs","text":"fill.NAs prepares data use model matching procedure filling missing values minimally invasive substitutes. Fill-performed column-wise, column treated individually. column missing, new column created form “ColumnName.NA” indicators observation missing value “ColumnName”.  Rosenbaum Rubin (1984, Sec. 2.4 Appendix B) discuss propensity score models using data structure. replacement value used fill missing value simple mean replacement. transformations variables, e.g. y ~ x1 * x2, transformation occurs first. transformation column NA base columns NA. Fill-occurs next, replacing missing values observed column mean. includes transformation columns. Data can passed fill.NAs two ways. First, can simply pass data.frame object fill.NAs fill every column. Alternatively, can pass formula data.frame. Fill-applied columns specifically used formula. Prior fill-, functions formula expanded. arguments functions NA, function value also NA subject fill-. default, fill.NAs impute response variable. encourage sophisticated imputation schemes response treatment indicator matching problem. behavior can overridden setting .covs = TRUE.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/fill.NAs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create missingness indicator variables and non-informatively fill in missing values — fill.NAs","text":"Rosenbaum, Paul R. Rubin, Donald B. (1984) ‘Reducing   Bias Observational Studies using Subclassification   Propensity Score,’ Journal American Statistical   Association, 79, 516 – 524. Von Hipple, Paul T. (2009) ‘impute interactions,   squares, transformed variables,’ Sociological   Methodology, 39(1), 265 – 291.","code":""},{"path":[]},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/fill.NAs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create missingness indicator variables and non-informatively fill in missing values — fill.NAs","text":"Mark M. Fredrickson Jake Bowers","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/fill.NAs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create missingness indicator variables and non-informatively fill in missing values — fill.NAs","text":"","code":"data(nuclearplants) ### Extract some representative covariates: np.missing <- nuclearplants[c('t1', 't2', 'ne', 'ct', 'cum.n')]   ### create some missingness in the covariates  n <- dim(np.missing)[1]  k <- dim(np.missing)[2]   for (i in 1:n) {    missing <- rbinom(1, prob = .1, size = k)    if (missing > 0) {      np.missing[i, sample(k, missing)] <- NA    }  }  ### Restore outcome and treatment variables: np.missing <- data.frame(nuclearplants[c('cost', 'pr')], np.missing)  ### Fit a propensity score but with missing covariate data flagged ### and filled in, as in Rosenbaum and Rubin (1984, Appendix): np.filled <- fill.NAs(pr ~ t1 * t2, np.missing) # Look at np.filled to establish what missingness flags were created head(np.filled) #>   pr t1 t2 t1:t2 t1.NA t2.NA #> H  0 14 46   644 FALSE FALSE #> I  0 10 73   730 FALSE FALSE #> A  1 10 85   850 FALSE FALSE #> J  0 11 67   737 FALSE FALSE #> B  1 11 78   858 FALSE FALSE #> K  0 13 51   663 FALSE FALSE (np.glm <- glm(pr ~ ., family=binomial, data=np.filled)) #>  #> Call:  glm(formula = pr ~ ., family = binomial, data = np.filled) #>  #> Coefficients: #> (Intercept)           t1           t2      `t1:t2`    t1.NATRUE    t2.NATRUE   #>  -21.049981     0.115834     0.206145     0.005593     2.705296     1.761089   #>  #> Degrees of Freedom: 31 Total (i.e. Null);  26 Residual #> Null Deviance:\t    39.75  #> Residual Deviance: 27.2 \tAIC: 39.2 (glm(pr ~ t1 + t2 + `t1:t2` + t1.NA + t2.NA,                 family=binomial, data=np.filled)) #>  #> Call:  glm(formula = pr ~ t1 + t2 + `t1:t2` + t1.NA + t2.NA, family = binomial,  #>     data = np.filled) #>  #> Coefficients: #> (Intercept)           t1           t2      `t1:t2`    t1.NATRUE    t2.NATRUE   #>  -21.049981     0.115834     0.206145     0.005593     2.705296     1.761089   #>  #> Degrees of Freedom: 31 Total (i.e. Null);  26 Residual #> Null Deviance:\t    39.75  #> Residual Deviance: 27.2 \tAIC: 39.2 # In a non-interactive session, the following may help, as long as # the formula passed to `fill.NAs` (plus any missingness flags) is # the desired formula for the glm. (glm(formula(terms(np.filled)), family=binomial, data=np.filled)) #>  #> Call:  glm(formula = formula(terms(np.filled)), family = binomial, data = np.filled) #>  #> Coefficients: #> (Intercept)           t1           t2      `t1:t2`    t1.NATRUE    t2.NATRUE   #>  -21.049981     0.115834     0.206145     0.005593     2.705296     1.761089   #>  #> Degrees of Freedom: 31 Total (i.e. Null);  26 Residual #> Null Deviance:\t    39.75  #> Residual Deviance: 27.2 \tAIC: 39.2  ### produce a matrix of propensity distances based on the propensity model ### with fill-in and flagging. Then perform pair matching on it: pairmatch(match_on(np.glm, data=np.filled), data=np.filled) #>    H    I    A    J    B    K    L    M    C    N    O    P    Q    R    S    T  #> <NA>  1.7  1.1 <NA>  1.2 <NA> <NA> <NA>  1.3  1.4 <NA> <NA> 1.10 <NA> <NA> <NA>  #>    U    D    V    E    W    F    X    G    Y    Z    d    e    f    a    b    c  #>  1.6  1.4  1.9  1.5  1.3  1.6  1.5  1.7 <NA>  1.8  1.2 <NA>  1.1  1.8  1.9 1.10   ## fill NAs without using treatment contrasts by making a list of contrasts for ## each factor ## following hints from https://stackoverflow.com/a/4569239/161808  np.missing$t1F<-factor(np.missing$t1) cov.factors <- sapply(np.missing[,c(\"t1F\",\"t2\")],is.factor) cov.contrasts <- lapply(   np.missing[,names(cov.factors)[cov.factors],drop=FALSE],   contrasts, contrasts = FALSE)  ## make a data frame filling the missing covariate values, but without ## excluding any levels of any factors np.noNA2<-fill.NAs(pr~t1F+t2,data=np.missing,contrasts.arg=cov.contrasts)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/findSubproblems.html","id":null,"dir":"Reference","previous_headings":"","what":"List subproblems of a distance — findSubproblems","title":"List subproblems of a distance — findSubproblems","text":"Get subproblems distance specification","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/findSubproblems.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List subproblems of a distance — findSubproblems","text":"","code":"findSubproblems(d)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/findSubproblems.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List subproblems of a distance — findSubproblems","text":"d distance specification","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/findSubproblems.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List subproblems of a distance — findSubproblems","text":"list distance specifications","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/findSubproblems.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"List subproblems of a distance — findSubproblems","text":"Mark M. Fredrickson","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/fmla2treatedblocking.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) A helper function to turn formulas into treatment and blocking variables — fmla2treatedblocking","title":"(Internal) A helper function to turn formulas into treatment and blocking variables — fmla2treatedblocking","text":"Given function arguments normally passed model.frame, function return data.frame two columns: treatment indicator blocking factor.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/fmla2treatedblocking.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) A helper function to turn formulas into treatment and blocking variables — fmla2treatedblocking","text":"","code":"fmla2treatedblocking(x, ...)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/fmla2treatedblocking.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) A helper function to turn formulas into treatment and blocking variables — fmla2treatedblocking","text":"x formula ... Arguments passed model.frame (e.g. data)","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/fmla2treatedblocking.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) A helper function to turn formulas into treatment and blocking variables — fmla2treatedblocking","text":"data.frame containing two columns: Z treatment indicator, B blocking factor","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/fullmatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimal full matching — fullmatch","title":"Optimal full matching — fullmatch","text":"Given two groups, treatment control group, method creating treatment--control discrepancy matrix indicating desirability permissibility potential matches (optionally already created discrepancy matrix), create optimal full matches members groups. Optionally, incorporate restrictions matched sets' ratios treatment control units.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/fullmatch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimal full matching — fullmatch","text":"","code":"fullmatch(   x,   min.controls = 0,   max.controls = Inf,   omit.fraction = NULL,   mean.controls = NULL,   tol = 0.001,   data = NULL,   solver = \"\",   ... )  full(   x,   min.controls = 0,   max.controls = Inf,   omit.fraction = NULL,   mean.controls = NULL,   tol = 0.001,   data = NULL,   solver = \"\",   ... )"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/fullmatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimal full matching — fullmatch","text":"x valid input match_on. fullmatch use x optional arguments generate distance performing matching. x numeric vector, must also passed vector z indicating grouping. vectors must named. Alternatively, precomputed distance may entered. matrix non-negative discrepancies, indicating permissibility desirability matching unit corresponding row ('treatment') unit corresponding column ('control'); , better, distance specification produced match_on. min.controls minimum ratio controls treatments permitted within matched set: non-negative finite.  min.controls whole number, reciprocal whole number, zero, rounded nearest whole number reciprocal whole number. matching within subclasses (created exactMatch), min.controls may named numeric vector separately specifying minimum permissible ratio controls treatments subclass.  names vector include names subproblems distance. max.controls maximum ratio controls treatments permitted within matched set: positive numeric. max.controls whole number, reciprocal whole number, Inf, rounded nearest whole number reciprocal whole number. matching within subclasses (created exactMatch), max.controls may named numeric vector separately specifying maximum permissible ratio controls treatments subclass. omit.fraction Optionally, specify fraction controls treated subjects rejected.  omit.fraction positive fraction less one, fullmatch leaves fraction control reservoir unmatched.  omit.fraction negative number greater -1, fullmatch leaves |omit.fraction| treated group unmatched.  Positive values accepted max.controls >= 1; negative values, min.controls <= 1. neither omit.fraction mean.controls specified, treated control subjects without permissible matches among control treated subjects, respectively, omitted. matching within subclasses (created exactMatch), omit.fraction specifies fraction controls rejected subproblem, parameter can made differ subclass setting omit.fraction equal named numeric vector fractions. one mean.controls omit.fraction can non-NULL. mean.controls Optionally, specify average number controls per treatment matched. Must less min.controls greater either max.controls ratio total number controls versus total number treated. controls likely matched ensure meeting value. neither omit.fraction mean.controls specified, treated control subjects without permissible matches among control treated subjects, respectively, omitted. matching within subclasses (created exactMatch), mean.controls specifies average number controls per treatment per subproblem, parameter can made differ subclass setting mean.controls equal named numeric vector. one mean.controls omit.fraction can non-NULL. tol internal rounding, fullmatch may solve slightly different matching problem one specified, match generated fullmatch may coincide optimal solution specified problem.  tol times number subjects matched specifies extent fullmatch's output permitted differ optimal solution original problem, measured sum discrepancies treatments controls placed matched sets. data Optional data.frame vector use get order final matching factor. data.frame, rownames used. vector, names first tried, otherwise contents considered character vector names. Useful pass want combine match (using, e.g., cbind) data used generate (example, propensity score matching). solver Choose solver use. Currently implemented RELAX-IV   LEMON. Default \"\", blank string, use RELAX-IV   rrelaxiv package installed, otherwise use LEMON. explicitly use RELAX-IV, pass string \"RELAX-IV\". use LEMON, pass string \"LEMON\". Optionally, specify algorithm LEMON use, pass function LEMON argument algorithm name, \"CycleCancelling\", \"CapacityScaling\", \"CostScaling\", \"NetworkSimplex\". See site details differences: https://lemon.cs.elte.hu/pub/doc/latest/a00606.html. CycleCancelling default. CycleCancelling algorithm seems produce results closely resembling optmatch versions prior 1.0. observed LEMON algorithms produce different results mean.controls unspecified, specified way produce infeasible matching problem. using LEMON algorithm CycleCancelling, recommend setting fullmatch_try_recovery option FALSE. ... Additional arguments, passed match_on (e.g. within) specific methods.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/fullmatch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimal full matching — fullmatch","text":"optmatch object (factor) indicating matched groups.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/fullmatch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Optimal full matching — fullmatch","text":"passing already created discrepancy matrix, finite entries indicate permissible matches, smaller discrepancies indicating desirable matches.  matrix must row column names. desirable create discrepancies matrix beforehand (example, planning running several different matching schemes), consider using match_on generate distances. generic function several useful methods handling propensity score models, computing Mahalanobis distances (arbitrary distances), using user supplied functions. distances can also combined generated exactMatch caliper create nuanced matching specifications. value tol can substantial effect computation time; smaller values, computation takes longer.  every tolerance can met, small tolerance small varies machine details problem.  fullmatch guarantee tolerance small given value argument tol, matching proceeds warning issued. default, fullmatch attempt, given constraints infeasible, find feasible problem using constraints.  almost surely involve using restrictive omit.fraction mean.controls. (never automatically omit treatment units.) Note guarantee returned match least possible number omitted subjects, gives match feasible within given constraints. may often possible loosen omit.fraction mean.controls constraint still find feasible match. auto recovery controlled options(\"fullmatch_try_recovery\"). full matching problems permitting many-one matches (min.controls less 1), number controls contributing matches can exceed requested setting value mean.controls omit.fraction.  .e., setting mean.controls sets minimum ratio number controls number treatments placed matched sets. program detects (thinks ) large problem, warning issued. Unless older computer, good chance can handle larger problems (cost increased computation time). check large problem threshold, use getMaxProblemSize; re-set , use setMaxProblemSize.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/fullmatch.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Optimal full matching — fullmatch","text":"Hansen, B.B. Klopfer, S.O. (2006), ‘ Optimal full matching related designs via network flows’,  Journal Computational Graphical Statistics, 15, 609–627. Hansen, B.B. (2004), ‘Full Matching Observational Study  Coaching SAT’, Journal American  Statistical Association, 99, 609–618. Rosenbaum, P. (1991), ‘Characterization Optimal Designs Observational  Studies’, Journal Royal Statistical Society, Series B,  53, 597–610.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/fullmatch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimal full matching — fullmatch","text":"","code":"data(nuclearplants) ### Full matching on a Mahalanobis distance. ( fm1 <- fullmatch(pr ~ t1 + t2, data = nuclearplants) ) #>    H    I    A    J    B    K    L    M    C    N    O    P    Q    R    S    T  #>  1.3  1.1  1.1  1.8  1.2  1.3  1.3  1.3  1.3  1.8  1.8  1.3  1.5  1.3  1.9 1.10  #>    U    D    V    E    W    F    X    G    Y    Z    d    e    f    a    b    c  #>  1.7  1.4  1.4  1.5  1.2  1.6  1.5  1.7  1.3  1.6  1.3  1.3  1.3  1.8  1.9 1.10  summary(fm1) #> Structure of matched sets: #>  1:1  1:2  1:3 1:5+  #>    7    1    1    1  #> Effective Sample Size:  11.7  #> (equivalent number of matched pairs). #>   ### Full matching with restrictions. ( fm2 <- fullmatch(pr ~ t1 + t2, min.controls = .5, max.controls = 4, data = nuclearplants) ) #>    H    I    A    J    B    K    L    M    C    N    O    P    Q    R    S    T  #>  1.3  1.1  1.1  1.8  1.2  1.3  1.3  1.5  1.3  1.8  1.8  1.3  1.5  1.5  1.9  1.8  #>    U    D    V    E    W    F    X    G    Y    Z    d    e    f    a    b    c  #>  1.7  1.4  1.4  1.5  1.2  1.6  1.5  1.7  1.7  1.6  1.9 1.10  1.9  1.8  1.9 1.10  summary(fm2) #> Structure of matched sets: #> 1:1 1:2 1:3 1:4  #>   5   1   1   3  #> Effective Sample Size:  12.6  #> (equivalent number of matched pairs). #>   ### Full matching to half of available controls. ( fm3 <- fullmatch(pr ~ t1 + t2, omit.fraction = .5, data = nuclearplants) ) #>    H    I    A    J    B    K    L    M    C    N    O    P    Q    R    S    T  #> <NA>  1.1  1.1 1.10  1.2 <NA> <NA>  1.3  1.3  1.8 <NA> <NA>  1.5 <NA>  1.9 <NA>  #>    U    D    V    E    W    F    X    G    Y    Z    d    e    f    a    b    c  #>  1.7  1.4  1.4  1.5  1.2  1.6  1.5  1.7 <NA>  1.6 <NA> <NA> <NA>  1.8  1.9 1.10  summary(fm3) #> Structure of matched sets: #> 1:1 1:2 0:1  #>   9   1  11  #> Effective Sample Size:  10.3  #> (equivalent number of matched pairs). #>   ### Full matching attempts recovery when the initial restrictions are infeasible. ### Limiting max.controls = 1 allows use of only 10 of 22 controls. ( fm4 <- fullmatch(pr ~ t1 + t2, max.controls = 1, data=nuclearplants) ) #>    H    I    A    J    B    K    L    M    C    N    O    P    Q    R    S    T  #> <NA>  1.1  1.1 1.10  1.2 <NA> <NA>  1.3  1.3  1.8 <NA> <NA> <NA> <NA>  1.9 <NA>  #>    U    D    V    E    W    F    X    G    Y    Z    d    e    f    a    b    c  #>  1.7  1.4  1.4  1.5  1.2  1.6  1.5  1.7 <NA>  1.6 <NA> <NA> <NA>  1.8  1.9 1.10  summary(fm4) #> Structure of matched sets: #> 1:1 0:1  #>  10  12  #> Effective Sample Size:  10  #> (equivalent number of matched pairs). #>  ### To recover restrictions optmatch_restrictions(fm4) #> $min.controls #> [1] 0 #>  #> $max.controls #> [1] 1 #>  #> $omit.fraction #> [1] 0.5454545 #>   ### Full matching within a propensity score caliper. ppty <- glm(pr ~ . - (pr + cost), family = binomial(), data = nuclearplants) ### Note that units without counterparts within the caliper are automatically dropped. ### For more complicated models, create a distance matrix and pass it to fullmatch. mhd <- match_on(pr ~ t1 + t2, data = nuclearplants) + caliper(match_on(ppty), width = 1) ( fm5 <- fullmatch(mhd, data = nuclearplants) ) #>    H    I    A    J    B    K    L    M    C    N    O    P    Q    R    S    T  #> <NA>  1.9 <NA>  1.2  1.1 <NA> <NA>  1.2  1.2  1.2  1.2 <NA>  1.2  1.2  1.4  1.1  #>    U    D    V    E    W    F    X    G    Y    Z    d    e    f    a    b    c  #>  1.5  1.3  1.3  1.4  1.2  1.5  1.2  1.5 <NA>  1.4  1.7 <NA>  1.2  1.7  1.3  1.9  summary(fm5) #> Structure of matched sets: #>  1:0  2:1  1:1  1:2 1:5+  0:1  #>    1    2    3    1    1    6  #> Effective Sample Size:  8.8  #> (equivalent number of matched pairs). #>   ### Propensity balance assessment. Requires RItools package. if (require(RItools)) summary(fm5,ppty) #> Loading required package: RItools #> Loading required package: ggplot2 #> Structure of matched sets: #>  1:0  2:1  1:1  1:2 1:5+  0:1  #>    1    2    3    1    1    6  #> Effective Sample Size:  8.8  #> (equivalent number of matched pairs). #>  #> Balance test overall result: #>   chisquare df p.value #>        7.93  9   0.542  ### The order of the names in the match factor is the same ### as the nuclearplants data.frame since we used the data argument ### when calling fullmatch. The order would be unspecified otherwise. cbind(nuclearplants, matches = fm5) #>     cost  date t1 t2  cap pr ne ct bw cum.n pt matches #> H 460.05 68.58 14 46  687  0  1  0  0    14  0    <NA> #> I 452.99 67.33 10 73 1065  0  0  1  0     1  0     1.9 #> A 443.22 67.33 10 85 1065  1  0  1  0     1  0    <NA> #> J 652.32 68.00 11 67 1065  0  1  1  0    12  0     1.2 #> B 642.23 68.00 11 78 1065  1  1  1  0    12  0     1.1 #> K 345.39 67.92 13 51  514  0  1  1  0     3  0    <NA> #> L 272.37 68.17 12 50  822  0  0  0  0     5  0    <NA> #> M 317.21 68.42 14 59  457  0  0  0  0     1  0     1.2 #> C 457.12 68.42 15 55  822  1  0  0  0     5  0     1.2 #> N 690.19 68.33 12 71  792  0  1  1  1     2  0     1.2 #> O 350.63 68.58 12 64  560  0  0  0  0     3  0     1.2 #> P 402.59 68.75 13 47  790  0  1  0  0     6  0    <NA> #> Q 412.18 68.42 15 62  530  0  0  1  0     2  0     1.2 #> R 495.58 68.92 17 52 1050  0  0  0  0     7  0     1.2 #> S 394.36 68.92 13 65  850  0  0  0  1    16  0     1.4 #> T 423.32 68.42 11 67  778  0  0  0  0     3  0     1.1 #> U 712.27 69.50 18 60  845  0  1  0  0    17  0     1.5 #> D 289.66 68.42 15 76  530  1  0  1  0     2  0     1.3 #> V 881.24 69.17 15 67 1090  0  0  0  0     1  0     1.3 #> E 490.88 68.92 16 59 1050  1  0  0  0     8  0     1.4 #> W 567.79 68.75 11 70  913  0  0  1  1    15  0     1.2 #> F 665.99 70.92 22 57  828  1  1  0  0    20  0     1.5 #> X 621.45 69.67 16 59  786  0  0  1  0    18  0     1.2 #> G 608.80 70.08 19 58  821  1  0  0  0     3  0     1.5 #> Y 473.64 70.42 19 44  538  0  0  1  0    19  0    <NA> #> Z 697.14 71.08 20 57 1130  0  0  1  0    21  0     1.4 #> d 207.51 67.25 13 63  745  0  0  0  0     8  1     1.7 #> e 288.48 67.17  9 48  821  0  0  1  0     7  1    <NA> #> f 284.88 67.83 12 63  886  0  0  0  1    11  1     1.2 #> a 280.36 67.83 12 71  886  1  0  0  1    11  1     1.7 #> b 217.38 67.25 13 72  745  1  0  0  0     8  1     1.3 #> c 270.71 67.83  7 80  886  1  0  0  1    11  1     1.9  ### Match in subgroups only. There are a few ways to specify this. m1 <- fullmatch(pr ~ t1 + t2, data=nuclearplants,                 within=exactMatch(pr ~ pt, data=nuclearplants)) m2 <- fullmatch(pr ~ t1 + t2 + strata(pt), data=nuclearplants) ### Matching on propensity scores within matching in subgroups only: m3 <- fullmatch(glm(pr ~ t1 + t2, data=nuclearplants, family=binomial),                 data=nuclearplants,                 within=exactMatch(pr ~ pt, data=nuclearplants)) m4 <- fullmatch(glm(pr ~ t1 + t2 + pt, data=nuclearplants,                     family=binomial),                 data=nuclearplants,                 within=exactMatch(pr ~ pt, data=nuclearplants)) m5 <- fullmatch(glm(pr ~ t1 + t2 + strata(pt), data=nuclearplants,                     family=binomial), data=nuclearplants) # Including `strata(foo)` inside a glm uses `foo` in the model as # well, so here m4 and m5 are equivalent. m3 differs in that it does # not include `pt` in the glm."},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/getMaxProblemSize.html","id":null,"dir":"Reference","previous_headings":"","what":"What is the maximum allowed problem size? — getMaxProblemSize","title":"What is the maximum allowed problem size? — getMaxProblemSize","text":"prevent users starting excessively large matching problems, maximum problem size limited options(\"optmatch_max_problem_size\"). function quick helper assist fetching value scalar. option set, function falls back default value, hard coded optmatch package.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/getMaxProblemSize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"What is the maximum allowed problem size? — getMaxProblemSize","text":"","code":"getMaxProblemSize()"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/getMaxProblemSize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"What is the maximum allowed problem size? — getMaxProblemSize","text":"logical","code":""},{"path":[]},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/getMaxProblemSize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"What is the maximum allowed problem size? — getMaxProblemSize","text":"","code":"optmatch:::getMaxProblemSize() > 1 & optmatch:::getMaxProblemSize() < 1e100 #> [1] TRUE"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/hash_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Hashing functions for various distance objects # — hash_dist","title":"(Internal) Hashing functions for various distance objects # — hash_dist","text":"(Internal) Hashing functions various distance objects #","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/hash_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Hashing functions for various distance objects # — hash_dist","text":"","code":"hash_dist(dist)  # S3 method for class 'DenseMatrix' hash_dist(dist)  # S3 method for class 'matrix' hash_dist(dist)  # S3 method for class 'InfinitySparseMatrix' hash_dist(dist)  # S3 method for class 'BlockedInfinitySparseMatrix' hash_dist(dist)  # S3 method for class 'optmatch.dlist' hash_dist(dist)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/hash_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Hashing functions for various distance objects # — hash_dist","text":"dist Distance object hash. Must one InfinitySparseMatrix, BlockedInfinitySparseMatrix, DenseMatrix, matrix, distmatch.dlist.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/hash_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Hashing functions for various distance objects # — hash_dist","text":"Hash distance object null call","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/ism.subset.html","id":null,"dir":"Reference","previous_headings":"","what":"Subsetting for InfinitySparseMatrices — subset.InfinitySparseMatrix","title":"Subsetting for InfinitySparseMatrices — subset.InfinitySparseMatrix","text":"matches syntax semantics subset matrices.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/ism.subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subsetting for InfinitySparseMatrices — subset.InfinitySparseMatrix","text":"","code":"# S3 method for class 'InfinitySparseMatrix' subset(x, subset, select, ...)  # S4 method for class 'InfinitySparseMatrix' x[i, j = NULL, ..., drop = TRUE]  # S4 method for class 'InfinitySparseMatrix' x[i, j] <- value"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/ism.subset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subsetting for InfinitySparseMatrices — subset.InfinitySparseMatrix","text":"x InfinitySparseMatrix subset bound. subset Logical expression indicating rows keep. select Logical expression indicating columns keep. ... arguments ignored. Row indices. j Col indices. drop Ignored. value replacement values","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/ism.subset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subsetting for InfinitySparseMatrices — subset.InfinitySparseMatrix","text":"InfinitySparseMatrix selected elements.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/ism.subset.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Subsetting for InfinitySparseMatrices — subset.InfinitySparseMatrix","text":"Mark Fredrickson","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/ismBinaryOps.html","id":null,"dir":"Reference","previous_headings":"","what":"Element-wise addition — +,InfinitySparseMatrix,InfinitySparseMatrix-method","title":"Element-wise addition — +,InfinitySparseMatrix,InfinitySparseMatrix-method","text":"e1 + e2 returns element-wise sum   two InfinitySparseMatrix objects.   either element inf   resulting element inf. e1 - e2 returns element-wise subtraction   two InfinitySparseMatrix objects.   either element inf   resulting element inf. e1 * e2 returns element-wise multiplication   two InfinitySparseMatrix objects.   either element inf   resulting element inf. e1 / e2 returns element-wise division   two InfinitySparseMatrix objects.   either element inf   resulting element inf.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/ismBinaryOps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Element-wise addition — +,InfinitySparseMatrix,InfinitySparseMatrix-method","text":"","code":"# S4 method for class 'InfinitySparseMatrix,InfinitySparseMatrix' e1 + e2  # S4 method for class 'InfinitySparseMatrix,InfinitySparseMatrix' e1 - e2  # S4 method for class 'InfinitySparseMatrix,InfinitySparseMatrix' e1 * e2  # S4 method for class 'InfinitySparseMatrix,InfinitySparseMatrix' e1/e2"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/ismBinaryOps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Element-wise addition — +,InfinitySparseMatrix,InfinitySparseMatrix-method","text":"e1 InfinitySparseMatrix object e2 InfinitySparseMatrix object","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/ismBinaryOps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Element-wise addition — +,InfinitySparseMatrix,InfinitySparseMatrix-method","text":"InfinitySparseMatrix object representing   element-wise sum two ISM objects","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/makeOptmatch.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Create optmatch objects, the result of matching. — makeOptmatch","title":"(Internal) Create optmatch objects, the result of matching. — makeOptmatch","text":"internal function used create final output matching functions (fullmatch pairmatch). optmatch object descends factor, contains additional information relating quality match.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/makeOptmatch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Create optmatch objects, the result of matching. — makeOptmatch","text":"","code":"makeOptmatch(distance, solutions, call, data = NULL)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/makeOptmatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Create optmatch objects, the result of matching. — makeOptmatch","text":"distance DistanceSpecificaton object used create match. solutions list results matching, one list(cells,maxErr) object per subproblem. call call fullmatch pairmatch displayed later. data object names row.names provide order items match. names attached object, contents used names.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/makeOptmatch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Create optmatch objects, the result of matching. — makeOptmatch","text":"optmatch object","code":""},{"path":[]},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/match_on-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Create treated to control distances for matching problems — match_on","title":"Create treated to control distances for matching problems — match_on","text":"function produce matching distances, instance Mahalanobis distances, propensity score discrepancies calipers, combinations thereof, pairmatch fullmatch subsequently “match ”.  Conceptually, result call match_on treatment--control matrix distances.  matrices can grow quite large, practice match_on produces either ordinary dense matrix special sparse matrix structure (can make use caliper exact matching constraints reduce storage requirements). Methods supplied sparse structures, InfinitySparseMatrixes, can manipulated modified much way dense matrices.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/match_on-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create treated to control distances for matching problems — match_on","text":"","code":"match_on(x, within = NULL, caliper = NULL, exclude = NULL, data = NULL, ...)  # S3 method for class 'glm' match_on(   x,   within = NULL,   caliper = NULL,   exclude = NULL,   data = NULL,   standardization.scale = NULL,   ... )  # S3 method for class 'bigglm' match_on(   x,   within = NULL,   caliper = NULL,   exclude = NULL,   data = NULL,   standardization.scale = NULL,   ... )  # S3 method for class 'formula' match_on(   x,   within = NULL,   caliper = NULL,   exclude = NULL,   data = NULL,   subset = NULL,   method = \"mahalanobis\",   ... )  # S3 method for class '`function`' match_on(   x,   within = NULL,   caliper = NULL,   exclude = NULL,   data = NULL,   z = NULL,   ... )  # S3 method for class 'numeric' match_on(x, within = NULL, caliper = NULL, exclude = NULL, data = NULL, z, ...)  # S3 method for class 'InfinitySparseMatrix' match_on(x, within = NULL, caliper = NULL, exclude = NULL, data = NULL, ...)  # S3 method for class 'matrix' match_on(x, within = NULL, caliper = NULL, exclude = NULL, data = NULL, ...)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/match_on-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create treated to control distances for matching problems — match_on","text":"x model formula, fitted glm object implicitly specifying distance; see blurbs specific methods Details. within valid distance specification, result exactMatch caliper. Finite entries indicate distances create. Including argument can significantly speed computation sparse matching problems. Specify filter either via within via strata elements formula; mixing methods fail. caliper width caliper use exclude treated-control pairs values greater width. methods, may speed advantage passing width rather using caliper function existing distance specification. exclude list units (treated control) exclude caliper argument (supplied). data optional data frame. ... arguments methods. standardization.scale Function rescaling scores(x), NULL; defaults mad. (See Details.) subset subset data use creating distance specification. method string indicating method use computing distances data.  current possibilities \"mahalanobis\", \"euclidean\" \"rank_mahalanobis\". z logical binary vector indicating treatment control unit study. TRUE 1 represents treatment unit, FALSE 0 represents control unit. unit NA treatment status excluded distance matrix.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/match_on-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create treated to control distances for matching problems — match_on","text":"distance specification (matrix similar object)   suitable given distance argument   fullmatch pairmatch.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/match_on-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create treated to control distances for matching problems — match_on","text":"match_on generic. several supplied methods, providing basic output: matrix (similar) object treated units rows control units columns. cell [,j] indicates distance treated unit control unit j. Entries Inf said unmatchable. units guaranteed never matched set. problems many Inf entries, called sparse matching problems, match_on uses special data type space efficient standard R matrix.  problems sparse (.e. dense), match_on uses standard matrix type. match_on methods differ types arguments take, making function one-stop location many different ways specifying matches: using functions, formulas, models, even simple scores. Many methods require additional arguments, detailed . methods take within argument, distance specification made using exactMatch caliper (additive combination distance creating functions). match_on methods use finite entries within argument guide producing new distance. entry Inf within Inf distance matrix returned match_on. argument can reduce processing time needed compute sparse distance matrices. Details particular first type argument follow: First argument (x): glm. model assumed   fitted propensity score model. extracts distances   linear propensity score: fitted values linear predictor,   link function applied estimated conditional probabilities, opposed   estimated conditional probabilities (Rosenbaum & Rubin,   1985).  example, logistic model (glm   family=binomial()) logit function link,   models match_on computes distances terms logits   estimated conditional probabilities, .e. estimated log odds. Optionally distances also rescaled. default rescale,   reciprocal outlier-resistant variant pooled s.d.   propensity scores; see standardization_scale.  (  standardization.scale argument function can used   change dispersion calculated, e.g. calculate ordinary   outlier-resistant s.d.; passed   standardization_scale standardizer argument.)   skip rescaling, set argument standardization.scale 1.   overall result records   absolute differences treated control units linear, possibly   rescaled, propensity scores. addition, one can impose caliper terms distances   providing scalar caliper argument, forbidding matches   treatment control units differing calculated propensity score   specified caliper.  example, Rosenbaum Rubin's (1985)   caliper one-fifth pooled propensity score s.d. imposed   specifying caliper=.2, tandem either default rescaling   , follow example even closely, additional   specification standardization.scale=sd. Propensity calipers   beneficial computationally well statistically, reasons indicated   discussion numeric method. One can also specify exactMatching criteria using strata(foo) inside   formula build glm. example, passing   glm(y ~ x + strata(s)) match_on equivalent passing   within=exactMatch(y ~ strata(s)). Note combining   caliper argument, standard deviation used caliper   computed across strata, within strata. data used fit glm missing values left-hand side   (dependent) variable, observations omitted output   match_on.  observations missing values right hand   side (independent) variables, re-fit model imputing   variables using simple scheme adding indicator variables   missingness attempted, via scores function. First argument (x): bigglm. method works   analogously glm method, bigglm objects,   created bigglm function package ‘biglm’,   can handle bigger data sets ordinary glm function can. First argument (x): formula. formula must   Z, treatment indicator (Z=0 indicates control group,   Z=1 indicates treatment group), left hand side,   variables compute distance right hand side. E.g. Z ~ X1   + X2. Mahalanobis distance calculated square root d'Cd,   d vector X-differences pair observations C   inverse (generalized inverse) pooled covariance Xes. (pooling   covariance X within subset defined Z==0   within complement subset. similar Euclidean   distance calculated reexpressing Xes standard units,   reexpressed variables pooled SDs 1; except addresses   redundancies among variables scaling variables contributions   proportion correlations included variables.) Euclidean distance also available, via method=\"euclidean\",   ranked, Mahalanobis distance, via method=\"rank_mahalanobis\". treatment indicator Z noted must either numeric   (1 representing treated units 0 control units) logical   (TRUE treated, FALSE controls). (Earlier versions   software accepted factor variables types numeric variable;   may update existing scripts get run.) alternative specifying within argument, x   formula, strata command can used inside formula specify   exact matching. example, rather using within=exactMatch(y ~   z, data=data), may update formula y ~ x + strata(z).   use methods (within strata simultaneously. Note   combining caliper argument, standard   deviation used caliper computed across strata,   separately stratum. unit NA treatment status (Z) ignored included distance output.  Missing values variables right hand side formula handled follows. default match_on (1) create matrix distances observations valid values **** covariates (2) append matrices Inf values distances observations either missing values right-hand-side variables. (.e., observations missing values retained output, matches involving forbidden.) First argument (x): function. passed function   must take arguments: index, data, z.   data z arguments passed directly   match_on. index argument matrix two columns,   representing pairs treated control units valid   comparisons (given within arguments). first column row   name id treated unit data object. second column   id control unit, data object.   pairs, function return distance treated   unit control unit.  may sound complicated, simple   use. example, function returned absolute difference   two units using vector data  f <- function(index, data,   z) { abs(data[index[,1]] - data[index[,2]]) } .  (Note: simple case   precisely handled numeric method.) First argument (x): numeric. returns   absolute differences treated control units' values x.   caliper specified, pairings x-differences greater   forbidden.  Conceptually, distances set Inf;   computationally, either caliper within   specified information permissible pairings stored,   forbidden pairings simply omitted. Providing caliper   argument , opposed omitting afterward applying   caliper function, reduces storage requirements may   otherwise improve performance, particularly larger problems. numeric method, x must names. z named   must names x, though allows different   ordering names. x's name ordering considered canonical. First argument (x): matrix InfinitySparseMatrix. just return   arguments objects already valid distance specifications.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/match_on-methods.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create treated to control distances for matching problems — match_on","text":"P.~R. Rosenbaum D.~B. Rubin (1985), ‘Constructing   control group using multivariate matched sampling methods incorporate   propensity score’, American Statistician, 39 33–38.","code":""},{"path":[]},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/match_on-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create treated to control distances for matching problems — match_on","text":"","code":"data(nuclearplants) match_on.examples <- list() ### Propensity score distances. ### Recommended approach: (aGlm <- glm(pr~.-(pr+cost), family=binomial(), data=nuclearplants)) #>  #> Call:  glm(formula = pr ~ . - (pr + cost), family = binomial(), data = nuclearplants) #>  #> Coefficients: #> (Intercept)         date           t1           t2          cap           ne   #>   43.909419    -1.220088     0.938645     0.396002     0.001197    -0.995651   #>          ct           bw        cum.n           pt   #>   -2.615671    -0.088696     0.033575    -0.352112   #>  #> Degrees of Freedom: 31 Total (i.e. Null);  22 Residual #> Null Deviance:\t    39.75  #> Residual Deviance: 20.92 \tAIC: 40.92 match_on.examples$ps1 <- match_on(aGlm) ### A second approach: first extract propensity scores, then separately ### create a distance from them.  (Useful when importing propensity ### scores from an external program.) plantsPS <- predict(aGlm) match_on.examples$ps2 <- match_on(pr~plantsPS, data=nuclearplants) ### Full matching on the propensity score. fm1 <- fullmatch(match_on.examples$ps1, data = nuclearplants) fm2 <- fullmatch(match_on.examples$ps2, data = nuclearplants) ### Because match_on.glm uses robust estimates of spread, ### the results differ in detail -- but they are close enough ### to yield similar optimal matches. all(fm1 == fm2) # The same #> [1] TRUE  ### Mahalanobis distance: match_on.examples$mh1 <- match_on(pr ~ t1 + t2, data = nuclearplants)  ### Absolute differences on a scalar: tmp <- nuclearplants$t1 names(tmp) <- rownames(nuclearplants)  (absdist <- match_on(tmp, z = nuclearplants$pr,                   within = exactMatch(pr ~ pt, nuclearplants))) #> $`0` #>        control #> treated H  I  J K  L M  N  O P Q R S  T U V  W X Y  Z #>       A 4  0  1 3  2 4  2  2 3 5 7 3  1 8 5  1 6 9 10 #>       B 3  1  0 2  1 3  1  1 2 4 6 2  0 7 4  0 5 8  9 #>       C 1  5  4 2  3 1  3  3 2 0 2 2  4 3 0  4 1 4  5 #>       D 1  5  4 2  3 1  3  3 2 0 2 2  4 3 0  4 1 4  5 #>       E 2  6  5 3  4 2  4  4 3 1 1 3  5 2 1  5 0 3  4 #>       F 8 12 11 9 10 8 10 10 9 7 5 9 11 4 7 11 6 3  2 #>       G 5  9  8 6  7 5  7  7 6 4 2 6  8 1 4  8 3 0  1 #>  #> $`1` #>        control #> treated d e f #>       a 1 3 0 #>       b 0 4 1 #>       c 6 2 5 #>   ### Pair matching on the variable `t1`: pairmatch(absdist, data = nuclearplants) #>    H    I    A    J    B    K    L    M    C    N    O    P    Q    R    S    T  #> <NA>  0.1  0.1 <NA>  0.2 <NA> <NA> <NA>  0.3 <NA> <NA> <NA>  0.4 <NA> <NA> <NA>  #>    U    D    V    E    W    F    X    G    Y    Z    d    e    f    a    b    c  #> <NA>  0.4  0.3  0.5  0.2  0.6  0.5  0.7  0.7  0.6  1.2  1.3  1.1  1.1  1.2  1.3    ### Propensity score matching within subgroups: match_on.examples$ps3 <- match_on(aGlm, exactMatch(pr ~ pt, nuclearplants)) fullmatch(match_on.examples$ps3, data = nuclearplants) #>   H   I   A   J   B   K   L   M   C   N   O   P   Q   R   S   T   U   D   V   E  #> 0.3 0.5 0.1 0.3 0.2 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.5 0.3 0.2 0.1 0.1 0.5  #>   W   F   X   G   Y   Z   d   e   f   a   b   c  #> 0.3 0.1 0.3 0.2 0.3 0.3 1.1 1.3 1.2 1.1 1.2 1.3   ### Propensity score matching with a propensity score caliper: match_on.examples$pscal <- match_on.examples$ps1 + caliper(match_on.examples$ps1, 1) fullmatch(match_on.examples$pscal, data = nuclearplants) # Note that the caliper excludes some units #>    H    I    A    J    B    K    L    M    C    N    O    P    Q    R    S    T  #> <NA>  1.4 <NA>  1.2  1.1 <NA> <NA>  1.2  1.2  1.2  1.2 <NA>  1.2  1.2  1.4  1.2  #>    U    D    V    E    W    F    X    G    Y    Z    d    e    f    a    b    c  #>  1.1  1.3  1.3  1.4  1.2  1.3  1.2  1.1 <NA>  1.2  1.4 <NA>  1.2  1.3  1.3  1.1   ### A Mahalanobis distance for matching within subgroups: match_on.examples$mh2 <- match_on(pr ~ t1 + t2 , data = nuclearplants,                             within = exactMatch(pr ~ pt, nuclearplants))  ### Mahalanobis matching within subgroups, with a propensity score ### caliper: fullmatch(match_on.examples$mh2 + caliper(match_on.examples$ps3, 1), data = nuclearplants) #>    H    I    A    J    B    K    L    M    C    N    O    P    Q    R    S    T  #> <NA>  0.1 <NA>  0.2  0.1 <NA> <NA>  0.2  0.2  0.2  0.2 <NA>  0.2  0.2  0.4  0.2  #>    U    D    V    E    W    F    X    G    Y    Z    d    e    f    a    b    c  #>  0.5  0.3  0.3  0.4  0.2  0.5  0.2  0.5 <NA>  0.4  1.1 <NA> <NA>  1.1 <NA>  1.1   ### Alternative methods to matching without groups (exact matching) m1 <- match_on(pr ~ t1 + t2, data=nuclearplants, within=exactMatch(pr ~ pt, nuclearplants)) m2 <- match_on(pr ~ t1 + t2 + strata(pt), data=nuclearplants) # m1 and m2 are identical  m3 <- match_on(glm(pr ~ t1 + t2 + cost, data=nuclearplants,                    family=binomial),                data=nuclearplants,                within=exactMatch(pr ~ pt, data=nuclearplants)) m4 <- match_on(glm(pr ~ t1 + t2 + cost + pt, data=nuclearplants,                    family=binomial),                data=nuclearplants,                within=exactMatch(pr ~ pt, data=nuclearplants)) m5 <- match_on(glm(pr ~ t1 + t2 + cost + strata(pt), data=nuclearplants,                    family=binomial), data=nuclearplants) # Including `strata(foo)` inside a glm uses `foo` in the model as # well, so here m4 and m5 are equivalent. m3 differs in that it does # not include `pt` in the glm."},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/match_on_szn_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"pooled dispersion for a numeric variable — match_on_szn_scale","title":"pooled dispersion for a numeric variable — match_on_szn_scale","text":"Pooled Dispersion Numeric Variable","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/match_on_szn_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pooled dispersion for a numeric variable — match_on_szn_scale","text":"","code":"match_on_szn_scale(x, trtgrp, standardizer = mad)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/match_on_szn_scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pooled dispersion for a numeric variable — match_on_szn_scale","text":"x numeric variable trtgrp logical numeric. numeric, coerced logical via ! standardizer function numeric length 1","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/match_on_szn_scale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"pooled dispersion for a numeric variable — match_on_szn_scale","text":"numeric length 1","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/match_on_szn_scale.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"pooled dispersion for a numeric variable — match_on_szn_scale","text":"Dispersion pooled across treatment control group. default, measure dispersion calculated within group ordinary standard deviation rather robust alternative provided stats::mad.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/matched.distances.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine distances between matched units — matched.distances","title":"Determine distances between matched units — matched.distances","text":"match (produced pairmatch fullmatch) distance, extract distances matched units matched counterparts.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/matched.distances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine distances between matched units — matched.distances","text":"","code":"matched.distances(matchobj, distance, preserve.unit.names = FALSE)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/matched.distances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine distances between matched units — matched.distances","text":"matchobj Value call pairmatch fullmatch. distance Either distance matrix value call match_on. preserve.unit.names Logical.  TRUE, matched set matched.distances returns submatrix distance matrix corresponding ; FALSE, vector containing distances submatrix returned.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/matched.distances.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine distances between matched units — matched.distances","text":"list numeric vectors (matrices) distances, one   matched set.  Note matched set 1 treatment   k controls, k treatments 1 control, k,   k+1, distances.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/matched.distances.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine distances between matched units — matched.distances","text":"match (produced pairmatch fullmatch) distance, extract distances matched units matched counterparts.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/matched.distances.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Determine distances between matched units — matched.distances","text":"Ben B. Hansen","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/matched.distances.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine distances between matched units — matched.distances","text":"","code":"data(plantdist) plantsfm <- fullmatch(plantdist) #> Warning: Without 'data' argument the order of the match is not guaranteed #>     to be the same as your original data. (plantsfm.d <- matched.distances(plantsfm,plantdist,pres=TRUE)) #> $`1.1` #> I  #> 0  #>  #> $`1.2` #> J  #> 0  #>  #> $`1.3` #> L N P  #> 4 6 9  #>  #> $`1.4` #> H K M O Q T  #> 7 8 2 6 0 4  #>  #> $`1.5` #> R S V W  #> 0 2 8 4  #>  #> $`1.6` #>  U  Z  #>  5 12  #>  #> $`1.7` #> X Y  #> 4 8  #>  unlist(lapply(plantsfm.d, max)) #> 1.1 1.2 1.3 1.4 1.5 1.6 1.7  #>   0   0   9   8   8  12   8  mean(unlist(plantsfm.d)) #> [1] 4.684211"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/matched.html","id":null,"dir":"Reference","previous_headings":"","what":"Identification of units placed into matched sets — matched","title":"Identification of units placed into matched sets — matched","text":"Given bipartite matching (object class optmatch), create logical vector length indicating units placed matched sets.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/matched.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identification of units placed into matched sets — matched","text":"","code":"matched(x)  unmatched()  matchfailed(x)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/matched.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identification of units placed into matched sets — matched","text":"x Vector class optmatch (especially generated call fullmatch).","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/matched.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identification of units placed into matched sets — matched","text":"logical vector (without names).","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/matched.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identification of units placed into matched sets — matched","text":"matched unmatched indicate elements x belong matched sets, indicated character representations x. fullmatch presented inconsistent combination constraints discrepancies potential matches, exists matching () finite total discrepancy within matched sets (ii) respects given constraints, matching problem said infeasible. TRUEs output matchfailed indicate occurred.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/matched.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Identification of units placed into matched sets — matched","text":"understand output matchfailed element-wise,   note fullmatch handles matching problem three   steps.  First, fullmatch directed match   within subclasses, divides matching problem   subproblem subclass.  Second, fullmatch removes   subproblem individual units lack   permissible potential matches (.e. potential matches   separated finite discrepancy).  \"isolated\"   units flagged way indicated   unmatched, matchfailed.  Third,   fullmatch presents subproblem, isolated   elements removed, optimal matching routine.    reduced subproblem found stage infeasible,   unit contributing flagged indicated   matchfailed.","code":""},{"path":[]},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/matched.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Identification of units placed into matched sets — matched","text":"Ben Hansen","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/matched.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identification of units placed into matched sets — matched","text":"","code":"data(plantdist)  mxpl.fm0 <- fullmatch(plantdist) # A feasible matching problem #> Warning: Without 'data' argument the order of the match is not guaranteed #>     to be the same as your original data. c(sum(matched(mxpl.fm0)), sum(unmatched(mxpl.fm0))) #> [1] 26  0 sum(matchfailed(mxpl.fm0)) #> [1] 0 mxpl.fm1 <- fullmatch(plantdist, # An infeasible problem                       max.controls=3, min.controls=3) #> Warning: Without 'data' argument the order of the match is not guaranteed #>     to be the same as your original data. #> Warning: Matching failed. (Restrictions impossible to meet?) #>  Enter ?matchfailed for more info. c(sum(matched(mxpl.fm1)), sum(unmatched(mxpl.fm1))) #> [1]  0 26 sum(matchfailed(mxpl.fm1)) #> [1] 26  mxpl.si <- factor(c('a', 'a', 'c', rep('d',4), 'b', 'c', 'c', rep('d', 16))) names(mxpl.si) <- LETTERS[1:26] mxpl.exactmatch <- exactMatch(mxpl.si, c(rep(1, 7), rep(0, 26 - 7))) # Subclass a contains two treated units but no controls; # subclass b contains only a control unit; # subclass c contains one treated and two control units; # subclass d contains the remaining twenty units. # only valid subproblems will be used  mcl <- c(1, Inf)  mxpl.fm2 <- fullmatch(plantdist + mxpl.exactmatch,                       max.controls=mcl) #> Warning: Without 'data' argument the order of the match is not guaranteed #>     to be the same as your original data. sum(matched(mxpl.fm2)) #> [1] 22  table(unmatched(mxpl.fm2), matchfailed(mxpl.fm2)) #>         #>         FALSE #>   FALSE    22 #>   TRUE      1  mxpl.fm2[matchfailed(mxpl.fm2)] #> factor(0)  mxpl.fm2[unmatched(mxpl.fm2) &   # isolated units return as          !matchfailed(mxpl.fm2)] # unmatched but not matchfailed #>    I  #> <NA>"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/maxCaliper.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the maximum caliper width that will create a feasible problem. — maxCaliper","title":"Find the maximum caliper width that will create a feasible problem. — maxCaliper","text":"Larger calipers permit possible matches treated control groups, can better creating matches larger effective sample sizes. downside wide calipers may make matching problem big processor memory constraints. maxCaliper attempts find caliper value, given vector scores treatment indicator, possible given maximum problem size constraints imposed fullmatch pairmatch.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/maxCaliper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the maximum caliper width that will create a feasible problem. — maxCaliper","text":"","code":"maxCaliper(scores, z, widths, structure = NULL, exact = TRUE)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/maxCaliper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the maximum caliper width that will create a feasible problem. — maxCaliper","text":"scores numeric vector scores providing 1-D position units z Treatment indicator vector widths vector caliper widths try, sorted largest smallest. structure Optional factor variable groups scores, used exactMatch. Including structure allows wider calipers. exact logical indicating exact problem size computed (exact = TRUE) computationally efficient upper bound used instead (exact = FALSE). upper bound may lead narrower calipers, even wider calipers sufficed using exact method.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/maxCaliper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the maximum caliper width that will create a feasible problem. — maxCaliper","text":"numeric value largest caliper creates feasible problem. caliper exists widths, error generated.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/mcf_c_fns.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine objects — c,SubProbInfo-method","title":"Combine objects — c,SubProbInfo-method","text":"Combine objects","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/mcf_c_fns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine objects — c,SubProbInfo-method","text":"","code":"# S4 method for class 'SubProbInfo' c(x, ...)  # S4 method for class 'NodeInfo' c(x, ...)  # S4 method for class 'ArcInfo' c(x, ...)  # S4 method for class 'MCFSolutions' c(x, ...)  # S4 method for class 'FullmatchMCFSolutions' c(x, ...)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/mcf_c_fns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine objects — c,SubProbInfo-method","text":"x object particular class ... Various objects","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/mcf_c_fns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine objects — c,SubProbInfo-method","text":"Combined objects","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/mdist.html","id":null,"dir":"Reference","previous_headings":"","what":"(Deprecated, in favor of match_on) Create matching distances — mdist","title":"(Deprecated, in favor of match_on) Create matching distances — mdist","text":"Deprecated favor match_on","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/mdist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Deprecated, in favor of match_on) Create matching distances — mdist","text":"","code":"mdist(x, structure.fmla = NULL, ...)  # S3 method for class 'optmatch.dlist' mdist(x, structure.fmla = NULL, ...)  # S3 method for class '`function`' mdist(x, structure.fmla = NULL, data = NULL, ...)  # S3 method for class 'formula' mdist(x, structure.fmla = NULL, data = NULL, subset = NULL, ...)  # S3 method for class 'glm' mdist(x, structure.fmla = NULL, standardization.scale = mad, ...)  # S3 method for class 'bigglm' mdist(x, structure.fmla = NULL, data = NULL, standardization.scale = mad, ...)  # S3 method for class 'numeric' mdist(x, structure.fmla = NULL, trtgrp = NULL, ...)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/mdist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Deprecated, in favor of match_on) Create matching distances — mdist","text":"x object use basis forming mdist. Methods exist formulas, functions, generalized linear models. structure.fmla formula denoting treatment variable left hand side optional grouping expression right hand side. example, z ~ 1 indicates grouping. z ~ s subsets data computing distances within subsets formed s. See method notes, , additional formula options. ... Additional method arguments. methods require 'data' argument. data Data variables references x live. subset non-NULL, subset data used. standardization.scale function scale distances; default uses mad. trtgrp Dummy variable treatment group membership.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/mdist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Deprecated, in favor of match_on) Create matching distances — mdist","text":"Object class optmatch.dlist, suitable   given distance argument   fullmatch pairmatch.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/mdist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Deprecated, in favor of match_on) Create matching distances — mdist","text":"mdist method provides three ways construct matching distance (.e., distance matrix suitably organized list matrices): guided function, fitted model, formula.  class first argument given mdist determines methods invoked. mdist.function method takes function two arguments. called, function receive treatment observations first argument control observations second argument. example, following computes raw differences values t1 treatment units (, nuclear plants pr==1) controls (, plants pr==0), returning result distance matrix: sdiffs <- function(treatments, controls) {      abs(outer(treatments$t1, controls$t1, `-`))    } mdist.function method similar things  earlier optmatch function makedist, although interface  bit different. mdist.formula method computes squared Mahalanobis  distance observations, right-hand side  formula determining variables contribute Mahalanobis  distance. matching done within strata,  stratification can communicated using either  structure.fmla argument (e.g. ~ grp) part  main formula (e.g. z ~ x1 + x2 | grp). mdist.glm method takes argument class glm  first argument.  assumes object fitted  propensity model, extracting distances linear propensity  score (logits estimated conditional probabilities) ,  default, rescaling distances reciprocal pooled  s.d. treatment- control-group propensity scores.  ( scaling uses mad, resistance outliers, default;  can changed actual s.d., rescaling can  skipped entirely, setting argument  standardization.scale sd NULL,  respectively.)  mdist.bigglm method works analogously  bigglm objects, created bigglm function  package ‘biglm’, can handle bigger data sets  ordinary glm function can.  contrast  mdist.glm requires additional data  structure.fmla arguments.  (enough data  use bigglm, probably subgroup  matching avoid memory problems. use  structure.fmla argument anyway.)","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/mdist.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"(Deprecated, in favor of match_on) Create matching distances — mdist","text":"P.~R. Rosenbaum D.~B. Rubin (1985),   ‘Constructing control group using multivariate matched   sampling methods incorporate propensity score’,   American Statistician, 39 33–38.","code":""},{"path":[]},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/mdist.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"(Deprecated, in favor of match_on) Create matching distances — mdist","text":"Mark M. Fredrickson","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/minExactMatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the minimal exact match factors that will be feasible for a given maximum problem size. — minExactMatch","title":"Find the minimal exact match factors that will be feasible for a given maximum problem size. — minExactMatch","text":"exactMatch function creates smaller matching problem stratifying observations smaller groups. problem larger maximum allowed size, minExactMatch provides way find smallest exact matching problem allow matching.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/minExactMatch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the minimal exact match factors that will be feasible for a given maximum problem size. — minExactMatch","text":"","code":"minExactMatch(x, scores = NULL, width = NULL, maxarcs = 1e+07, ...)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/minExactMatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the minimal exact match factors that will be feasible for a given maximum problem size. — minExactMatch","text":"x object dispatching. scores Optional vector scores checked caliper width. width Optional width caliper place scores. maxarcs maximum problem size attempt fit. ... Additional arguments methods.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/minExactMatch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the minimal exact match factors that will be feasible for a given maximum problem size. — minExactMatch","text":"factor grouping units, suitable exactMatch.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/minExactMatch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find the minimal exact match factors that will be feasible for a given maximum problem size. — minExactMatch","text":"x formula form Z ~ X1 + X2, Z indicates treatment control status, X1 X2 variables can converted factors. additional arguments passed model.frame (e.g., data argument containing Z, X1, X2). arguments scores width must passed together. function apply caliper implied scores width also adding blocking factors.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/minmaxctlcap.html","id":null,"dir":"Reference","previous_headings":"","what":"Set thinning and thickening caps for full matching — maxControlsCap","title":"Set thinning and thickening caps for full matching — maxControlsCap","text":"Functions find largest value min.controls, smallest value max.controls, full matching problem feasible.  determined constraints embedded matching problem's distance matrix.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/minmaxctlcap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set thinning and thickening caps for full matching — maxControlsCap","text":"","code":"maxControlsCap(distance, min.controls = NULL, solver = \"\")  minControlsCap(distance, max.controls = NULL, solver = \"\")"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/minmaxctlcap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set thinning and thickening caps for full matching — maxControlsCap","text":"distance Either matrix non-negative, numeric discrepancies, list matrices. (See fullmatch details.) min.controls Optionally, set limits minimum number controls per matched set.  (makes sense maxControlsCap.) solver Choose solver use. See help(fullmatch) details. max.controls Optionally, set limits maximum number controls per matched set.  (makes sense minControlsCap.)","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/minmaxctlcap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set thinning and thickening caps for full matching — maxControlsCap","text":"minControlsCap,   strictest.feasible.min.controls   given.max.controls. maxControlsCap,   given.min.controls   strictest.feasible.max.controls.  strictest.feasible.min.controls largest values   fullmatch argument min.controls yield   full match; given.max.controls max.controls argument   given minControlsCap , none given, vector   Infs. given.min.controls min.controls argument   given maxControlsCap , none given, vector   0s; strictest.feasible.max.controls smallest values   fullmatch argument max.controls   yield full match.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/minmaxctlcap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set thinning and thickening caps for full matching — maxControlsCap","text":"function works repeated application full matching, large problems can time-consuming.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/minmaxctlcap.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Set thinning and thickening caps for full matching — maxControlsCap","text":"Essentially just line search.  done several   things speed , everything might done.   present, thoroughly tested either: might check   final results make sure fullmatch   works values min.controls (  max.controls) suggested functions,   ceases work increase (decrease) values.   Comments appreciated.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/minmaxctlcap.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Set thinning and thickening caps for full matching — maxControlsCap","text":"Hansen, B.B. S. Olsen Klopfer (2006),   ‘Optimal full matching related designs via network   flows’, Journal Computational Graphical Statistics   15, 609–627.","code":""},{"path":[]},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/minmaxctlcap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set thinning and thickening caps for full matching — maxControlsCap","text":"Ben B. Hansen","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/missing_x_msg.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) If the x argument does not exist for match_on, fullmatch, or pairmatch, use this function to print a helpful message. — missing_x_msg","title":"(Internal) If the x argument does not exist for match_on, fullmatch, or pairmatch, use this function to print a helpful message. — missing_x_msg","text":"(Internal) x argument exist match_on, fullmatch, pairmatch, use function print helpful message.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/missing_x_msg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) If the x argument does not exist for match_on, fullmatch, or pairmatch, use this function to print a helpful message. — missing_x_msg","text":"","code":"missing_x_msg(x_str, data_str, ...)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/missing_x_msg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) If the x argument does not exist for match_on, fullmatch, or pairmatch, use this function to print a helpful message. — missing_x_msg","text":"x_str x string code, usually deparse(substitute(x)) data_str data arg string code ... look 'z = <stuff>' extra args caller","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/missing_x_msg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) If the x argument does not exist for match_on, fullmatch, or pairmatch, use this function to print a helpful message. — missing_x_msg","text":"string helpful error message","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/missing_x_msg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"(Internal) If the x argument does not exist for match_on, fullmatch, or pairmatch, use this function to print a helpful message. — missing_x_msg","text":"Josh Buckner","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/model.frame.svyglm.html","id":null,"dir":"Reference","previous_headings":"","what":"This method quells a warning when optmatch::scores() is applied to a svyglm object. — model.frame.svyglm","title":"This method quells a warning when optmatch::scores() is applied to a svyglm object. — model.frame.svyglm","text":"method quells warning optmatch::scores() applied svyglm object.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/model.frame.svyglm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This method quells a warning when optmatch::scores() is applied to a svyglm object. — model.frame.svyglm","text":"","code":"# S3 method for class 'svyglm' model.frame(formula, ...)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/nuclearplants.html","id":null,"dir":"Reference","previous_headings":"","what":"Nuclear Power Station Construction Data — nuclearplants","title":"Nuclear Power Station Construction Data — nuclearplants","text":"data relate construction 32 light water reactor (LWR) plants constructed U.S.late 1960's early 1970's.  data collected aim predicting cost construction LWR plants.  6 power plants partial turnkey guarantees possible , plants, manufacturers' subsidies may hidden quoted capital costs.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/nuclearplants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nuclear Power Station Construction Data — nuclearplants","text":"","code":"nuclearplants"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/nuclearplants.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Nuclear Power Station Construction Data — nuclearplants","text":"data frame 32 rows 11 columns cost: capital cost construction millions   dollars adjusted 1976 base. date: date construction permit issued.   data measured years since January 1 1990   nearest month. t1: time application issue   construction permit. t2: time issue operating license   construction permit. cap: net capacity power plant (MWe). pr: binary variable 1 indicates prior   existence LWR plant site. ne: binary variable 1 indicates   plant constructed north-east region U.S.. ct: binary variable 1 indicates use   cooling tower plant. bw: binary variable 1 indicates   nuclear steam supply system manufactured Babcock-Wilcox. cum.n: cumulative number power plants constructed   architect-engineer. pt: binary variable 1 indicates plants   partial turnkey guarantees.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/nuclearplants.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Nuclear Power Station Construction Data — nuclearplants","text":"data obtained boot package,   turn taken Cox Snell (1981). Although   data nuclear   data frame boot package, row names data   frame changed.  (new row names selected   ease certain demonstrations optmatch.) documentation page also adapted boot package, written Angelo Canty ported R Brian Ripley.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/nuclearplants.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Nuclear Power Station Construction Data — nuclearplants","text":"Cox, D.R. Snell, E.J. (1981) Applied Statistics:   Principles Examples. Chapman Hall.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/num_eligible_matches-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the number of eligible matches for the distance. — num_eligible_matches","title":"Returns the number of eligible matches for the distance. — num_eligible_matches","text":"return list number finite entries distance matrix. distance subgroups, list length 1. distance subgroups (.e. x BlockedInfinitySparseMatrix, named list.)","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/num_eligible_matches-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the number of eligible matches for the distance. — num_eligible_matches","text":"","code":"num_eligible_matches(x)  # S3 method for class 'optmatch.dlist' num_eligible_matches(x)  # S3 method for class 'matrix' num_eligible_matches(x)  # S3 method for class 'InfinitySparseMatrix' num_eligible_matches(x)  # S3 method for class 'BlockedInfinitySparseMatrix' num_eligible_matches(x)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/num_eligible_matches-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the number of eligible matches for the distance. — num_eligible_matches","text":"x distance object.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/num_eligible_matches-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the number of eligible matches for the distance. — num_eligible_matches","text":"list counting number eligible matches distance.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/optmatch-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions deprecated or removed from optmatch — optmatch-defunct","title":"Functions deprecated or removed from optmatch — optmatch-defunct","text":"course time, several functions optmatch removed favor new interfaces functions.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/optmatch-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions deprecated or removed from optmatch — optmatch-defunct","text":"","code":"pscore.dist(...)  mahal.dist(...)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/optmatch-defunct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions deprecated or removed from optmatch — optmatch-defunct","text":"... arguments ignored.","code":""},{"path":[]},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/optmatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Optmatch Class — optmatch","title":"Optmatch Class — optmatch","text":"optmatch class describes results optimal full matching (using either fullmatch pairmatch). part, objects can treated factors. summary function quantifies optmatch objects effective sample size, distribution distances matched units, well match reduces average differences.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/optmatch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optmatch Class — optmatch","text":"","code":"# S3 method for class 'optmatch' summary(   object,   propensity.model = NULL,   ...,   min.controls = 0.2,   max.controls = 5,   quantiles = c(0, 0.5, 0.95, 1) )"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/optmatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optmatch Class — optmatch","text":"object optmatch object summarize. propensity.model optional propensity model (result call glm) use summarizing match. RItools package installed, additional chi-squared test performed average differences treated control units variable used model. See xBalance function RItools package details. ... Additional arguments pass xBalance also passing propensity model. min.controls minimize display groups many treated controls, groups 5 treated units summarized “5+”. reciprocal default value (1/5 = 0.2). Lower value see groups. max.controls Like min.controls sets maximum group sized displayed respect number controls. Raise value see groups. quantiles points ECDF distances units displayed.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/optmatch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optmatch Class — optmatch","text":"optmatch.summary","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/optmatch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Optmatch Class — optmatch","text":"optmatch objects descend factor. Elements vector correspond members treatment control groups reference matching problem posed, named accordingly; names taken row column names distance.  element vector either NA, indicating unavailability suitable matches element, concatenation : () character abbreviation name subclass (encoded using exactMatch) (ii) string .; (iii) non-negative integer.  last place, positive whole numbers indicate placement unit matched set NA indicates part matching problem given fullmatch found infeasible.  functions matched, unmatched, matchfailed distinguish scenarios. Secondarily, fullmatch returns various data matching process result, stored attributes named vector primary output.  particular, exceedances attribute gives upper bounds, necessarily sharp, amount sum distances matched units result fullmatch exceeds least possible sum distances matched units feasible solution matching problem given fullmatch.  (bound also printed print.optmatch summary.optmatch.)","code":""},{"path":[]},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/optmatch_restrictions.html","id":null,"dir":"Reference","previous_headings":"","what":"optmatch_restrictions — optmatch_restrictions","title":"optmatch_restrictions — optmatch_restrictions","text":"Returns restrictions used generate match.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/optmatch_restrictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"optmatch_restrictions — optmatch_restrictions","text":"","code":"optmatch_restrictions(obj)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/optmatch_restrictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"optmatch_restrictions — optmatch_restrictions","text":"obj optmatch object","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/optmatch_restrictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"optmatch_restrictions — optmatch_restrictions","text":"list min.controls, max.controls either omit.fraction mean.controls.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/optmatch_restrictions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"optmatch_restrictions — optmatch_restrictions","text":"mean.controls explicitly specified creation optmatch object, returned; otherwise omit.fraction given. Note matching algorithm attempted recover initial infeasible restrictions, output function may original function call.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/optmatch_same_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if two distances are equivalent. x and y can be distances (InfinitySparseMatrix, BlockedInfinitySparseMatrix, or DenseMatrix), or they can be optmatch objects. — optmatch_same_distance","title":"Checks if two distances are equivalent. x and y can be distances (InfinitySparseMatrix, BlockedInfinitySparseMatrix, or DenseMatrix), or they can be optmatch objects. — optmatch_same_distance","text":"save space, optmatch objects merely store hash distance matrix instead original object. distance objects hashed comparison.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/optmatch_same_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if two distances are equivalent. x and y can be distances (InfinitySparseMatrix, BlockedInfinitySparseMatrix, or DenseMatrix), or they can be optmatch objects. — optmatch_same_distance","text":"","code":"optmatch_same_distance(x, y)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/optmatch_same_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if two distances are equivalent. x and y can be distances (InfinitySparseMatrix, BlockedInfinitySparseMatrix, or DenseMatrix), or they can be optmatch objects. — optmatch_same_distance","text":"x distances (InfinitySparseMatrix, BlockedInfinitySparseMatrix, DenseMatrix), optmatch object. y distances (InfinitySparseMatrix, BlockedInfinitySparseMatrix, DenseMatrix), optmatch object.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/optmatch_same_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if two distances are equivalent. x and y can be distances (InfinitySparseMatrix, BlockedInfinitySparseMatrix, or DenseMatrix), or they can be optmatch objects. — optmatch_same_distance","text":"Boolean whether two distance specifications identical.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/optmatch_same_distance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Checks if two distances are equivalent. x and y can be distances (InfinitySparseMatrix, BlockedInfinitySparseMatrix, or DenseMatrix), or they can be optmatch objects. — optmatch_same_distance","text":"Note distance hashed call set NULL. (avoids issues , example, match_on(Z~X, data=d, caliper=NULL) match_on(Z~X, data=d) produce identical matches differing calls.)","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/pairmatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimal 1:1 and 1:k matching — pairmatch","title":"Optimal 1:1 and 1:k matching — pairmatch","text":"Given treatment group, larger control reservoir, method creating discrepancies treatment control unit (optionally already created discrepancy matrix), finds pairing treatment units controls minimizes sum discrepancies.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/pairmatch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimal 1:1 and 1:k matching — pairmatch","text":"","code":"pairmatch(x, controls = 1, data = NULL, remove.unmatchables = FALSE, ...)  pair(x, controls = 1, data = NULL, remove.unmatchables = FALSE, ...)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/pairmatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimal 1:1 and 1:k matching — pairmatch","text":"x valid input match_on. x numeric vector, must also passed vector z indicating grouping. vectors must named. Alternatively, precomputed distance may entered. controls number controls matched treatment data Optional data set. remove.unmatchables treatment group members eligible controls removed prior matching? ... Additional arguments pass match_on (e.g. within)) fullmatch (e.g. tol). error pass min.controls, max.controls, mean.controls omit.fraction pairmatch must set values.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/pairmatch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimal 1:1 and 1:k matching — pairmatch","text":"optmatch object (factor) indicating matched groups.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/pairmatch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Optimal 1:1 and 1:k matching — pairmatch","text":"wrapper fullmatch; see documentation information, especially additional arguments pass, additional discussion valid input parameter x, feasibility recovery. remove.unmatchables FALSE, unmatchable treated units matching whole fail units matched.  TRUE, unit removed function attempt match treatment units.  version 0.9-8, fewer matchable treated units matchable controls pairmatch attempt place matched pair matchable controls strict subset matchable treated units. (Previously matching failed subclasses structure.) Matching can still fail, even remove.unmatchables set TRUE, much competition certain controls; find situation consider full matching, necessarily finds match everyone eligible match somewhere. units optmatch object returned correspond members treatment control groups reference matching problem posed, named accordingly; names taken row column names distance (possible additions optional data argument).  element vector concatenation : () character abbreviation subclass.indices, argument given, string 'm' ; (ii) string .; (iii) non-negative integer. Unmatched units NA entries. Secondarily, fullmatch returns various data matching process result, stored attributes named vector primary output.  particular, exceedances attribute gives upper bounds, necessarily sharp, amount sum distances matched units result fullmatch exceeds least possible sum distances matched units feasible solution matching problem given fullmatch.  (bound also printed print.optmatch summary.optmatch.)","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/pairmatch.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Optimal 1:1 and 1:k matching — pairmatch","text":"Hansen, B.B. Klopfer, S.O. (2006), ‘Optimal full matching related designs via network flows’, Journal Computational Graphical Statistics, 15, 609–627.","code":""},{"path":[]},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/pairmatch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimal 1:1 and 1:k matching — pairmatch","text":"","code":"data(nuclearplants)  ### Pair matching on a Mahalanobis distance ( pm1 <- pairmatch(pr ~ t1 + t2, data = nuclearplants) ) #>    H    I    A    J    B    K    L    M    C    N    O    P    Q    R    S    T  #> <NA>  1.1  1.1 1.10  1.2 <NA> <NA>  1.3  1.3  1.8 <NA> <NA> <NA> <NA>  1.9 <NA>  #>    U    D    V    E    W    F    X    G    Y    Z    d    e    f    a    b    c  #>  1.7  1.4  1.4  1.5  1.2  1.6  1.5  1.7 <NA>  1.6 <NA> <NA> <NA>  1.8  1.9 1.10  summary(pm1) #> Structure of matched sets: #> 1:1 0:1  #>  10  12  #> Effective Sample Size:  10  #> (equivalent number of matched pairs). #>   ### Pair matching within a propensity score caliper. ppty <- glm(pr ~ . - (pr + cost), family = binomial(), data = nuclearplants) ### For more complicated models, create a distance matrix and pass it to fullmatch. mhd <- match_on(pr ~ t1 + t2, data = nuclearplants) + caliper(match_on(ppty), 2) ( pm2 <- pairmatch(mhd, data = nuclearplants) ) #>    H    I    A    J    B    K    L    M    C    N    O    P    Q    R    S    T  #> <NA> 1.10  1.1 <NA>  1.2 <NA> <NA>  1.3  1.3  1.2 <NA> <NA> <NA> <NA>  1.4  1.8  #>    U    D    V    E    W    F    X    G    Y    Z    d    e    f    a    b    c  #>  1.7  1.4  1.9  1.5 <NA>  1.6  1.5  1.7 <NA>  1.6  1.1 <NA> <NA>  1.8  1.9 1.10  summary(pm2) #> Structure of matched sets: #> 1:1 0:1  #>  10  12  #> Effective Sample Size:  10  #> (equivalent number of matched pairs). #>   ### Propensity balance assessment. Requires RItools package. if(require(RItools)) summary(pm2, ppty) #> Structure of matched sets: #> 1:1 0:1  #>  10  12  #> Effective Sample Size:  10  #> (equivalent number of matched pairs). #>  #> Balance test overall result: #>   chisquare df p.value #>        8.54  9   0.481  ### 1:2 matched triples ( tm <- pairmatch(pr ~ t1 + t2, controls = 2, data = nuclearplants) ) #>    H    I    A    J    B    K    L    M    C    N    O    P    Q    R    S    T  #>  1.3  1.1  1.1 1.10  1.2  1.3 1.10  1.5  1.3  1.8  1.8 <NA>  1.4  1.7  1.9  1.1  #>    U    D    V    E    W    F    X    G    Y    Z    d    e    f    a    b    c  #>  1.7  1.4  1.4  1.5  1.2  1.6  1.5  1.7  1.6  1.6  1.9 <NA>  1.2  1.8  1.9 1.10  summary(tm) #> Structure of matched sets: #> 1:2 0:1  #>  10   2  #> Effective Sample Size:  13.3  #> (equivalent number of matched pairs). #>   ### Creating a data frame with the matched sets attached. ### match_on(), caliper() and the like cooperate with pairmatch() ### to make sure observations are in the proper order: all.equal(names(tm), row.names(nuclearplants)) #> [1] TRUE ### So our data frame including the matched sets is just cbind(nuclearplants, matches=tm) #>     cost  date t1 t2  cap pr ne ct bw cum.n pt matches #> H 460.05 68.58 14 46  687  0  1  0  0    14  0     1.3 #> I 452.99 67.33 10 73 1065  0  0  1  0     1  0     1.1 #> A 443.22 67.33 10 85 1065  1  0  1  0     1  0     1.1 #> J 652.32 68.00 11 67 1065  0  1  1  0    12  0    1.10 #> B 642.23 68.00 11 78 1065  1  1  1  0    12  0     1.2 #> K 345.39 67.92 13 51  514  0  1  1  0     3  0     1.3 #> L 272.37 68.17 12 50  822  0  0  0  0     5  0    1.10 #> M 317.21 68.42 14 59  457  0  0  0  0     1  0     1.5 #> C 457.12 68.42 15 55  822  1  0  0  0     5  0     1.3 #> N 690.19 68.33 12 71  792  0  1  1  1     2  0     1.8 #> O 350.63 68.58 12 64  560  0  0  0  0     3  0     1.8 #> P 402.59 68.75 13 47  790  0  1  0  0     6  0    <NA> #> Q 412.18 68.42 15 62  530  0  0  1  0     2  0     1.4 #> R 495.58 68.92 17 52 1050  0  0  0  0     7  0     1.7 #> S 394.36 68.92 13 65  850  0  0  0  1    16  0     1.9 #> T 423.32 68.42 11 67  778  0  0  0  0     3  0     1.1 #> U 712.27 69.50 18 60  845  0  1  0  0    17  0     1.7 #> D 289.66 68.42 15 76  530  1  0  1  0     2  0     1.4 #> V 881.24 69.17 15 67 1090  0  0  0  0     1  0     1.4 #> E 490.88 68.92 16 59 1050  1  0  0  0     8  0     1.5 #> W 567.79 68.75 11 70  913  0  0  1  1    15  0     1.2 #> F 665.99 70.92 22 57  828  1  1  0  0    20  0     1.6 #> X 621.45 69.67 16 59  786  0  0  1  0    18  0     1.5 #> G 608.80 70.08 19 58  821  1  0  0  0     3  0     1.7 #> Y 473.64 70.42 19 44  538  0  0  1  0    19  0     1.6 #> Z 697.14 71.08 20 57 1130  0  0  1  0    21  0     1.6 #> d 207.51 67.25 13 63  745  0  0  0  0     8  1     1.9 #> e 288.48 67.17  9 48  821  0  0  1  0     7  1    <NA> #> f 284.88 67.83 12 63  886  0  0  0  1    11  1     1.2 #> a 280.36 67.83 12 71  886  1  0  0  1    11  1     1.8 #> b 217.38 67.25 13 72  745  1  0  0  0     8  1     1.9 #> c 270.71 67.83  7 80  886  1  0  0  1    11  1    1.10  ### In contrast, if your matching distance is an ordinary matrix ### (as earlier versions of optmatch required), you'll ### have to align it by observation name with your data set. cbind(nuclearplants, matches = tm[row.names(nuclearplants)]) #>     cost  date t1 t2  cap pr ne ct bw cum.n pt matches #> H 460.05 68.58 14 46  687  0  1  0  0    14  0     1.3 #> I 452.99 67.33 10 73 1065  0  0  1  0     1  0     1.1 #> A 443.22 67.33 10 85 1065  1  0  1  0     1  0     1.1 #> J 652.32 68.00 11 67 1065  0  1  1  0    12  0    1.10 #> B 642.23 68.00 11 78 1065  1  1  1  0    12  0     1.2 #> K 345.39 67.92 13 51  514  0  1  1  0     3  0     1.3 #> L 272.37 68.17 12 50  822  0  0  0  0     5  0    1.10 #> M 317.21 68.42 14 59  457  0  0  0  0     1  0     1.5 #> C 457.12 68.42 15 55  822  1  0  0  0     5  0     1.3 #> N 690.19 68.33 12 71  792  0  1  1  1     2  0     1.8 #> O 350.63 68.58 12 64  560  0  0  0  0     3  0     1.8 #> P 402.59 68.75 13 47  790  0  1  0  0     6  0    <NA> #> Q 412.18 68.42 15 62  530  0  0  1  0     2  0     1.4 #> R 495.58 68.92 17 52 1050  0  0  0  0     7  0     1.7 #> S 394.36 68.92 13 65  850  0  0  0  1    16  0     1.9 #> T 423.32 68.42 11 67  778  0  0  0  0     3  0     1.1 #> U 712.27 69.50 18 60  845  0  1  0  0    17  0     1.7 #> D 289.66 68.42 15 76  530  1  0  1  0     2  0     1.4 #> V 881.24 69.17 15 67 1090  0  0  0  0     1  0     1.4 #> E 490.88 68.92 16 59 1050  1  0  0  0     8  0     1.5 #> W 567.79 68.75 11 70  913  0  0  1  1    15  0     1.2 #> F 665.99 70.92 22 57  828  1  1  0  0    20  0     1.6 #> X 621.45 69.67 16 59  786  0  0  1  0    18  0     1.5 #> G 608.80 70.08 19 58  821  1  0  0  0     3  0     1.7 #> Y 473.64 70.42 19 44  538  0  0  1  0    19  0     1.6 #> Z 697.14 71.08 20 57 1130  0  0  1  0    21  0     1.6 #> d 207.51 67.25 13 63  745  0  0  0  0     8  1     1.9 #> e 288.48 67.17  9 48  821  0  0  1  0     7  1    <NA> #> f 284.88 67.83 12 63  886  0  0  0  1    11  1     1.2 #> a 280.36 67.83 12 71  886  1  0  0  1    11  1     1.8 #> b 217.38 67.25 13 72  745  1  0  0  0     8  1     1.9 #> c 270.71 67.83  7 80  886  1  0  0  1    11  1    1.10   ### Match in subgroups only. There are a few ways to specify this. m1 <- pairmatch(pr ~ t1 + t2, data=nuclearplants,                 within=exactMatch(pr ~ pt, data=nuclearplants)) m2 <- pairmatch(pr ~ t1 + t2 + strata(pt), data=nuclearplants) ### Matching on propensity scores within matching in subgroups only: m3 <- pairmatch(glm(pr ~ t1 + t2, data=nuclearplants, family=binomial),                 data=nuclearplants,                 within=exactMatch(pr ~ pt, data=nuclearplants)) m4 <- pairmatch(glm(pr ~ t1 + t2 + pt, data=nuclearplants,                     family=binomial),                 data=nuclearplants,                 within=exactMatch(pr ~ pt, data=nuclearplants)) m5 <- pairmatch(glm(pr ~ t1 + t2 + strata(pt), data=nuclearplants,                     family=binomial), data=nuclearplants) # Including `strata(foo)` inside a glm uses `foo` in the model as # well, so here m4 and m5 are equivalent. m3 differs in that it does # not include `pt` in the glm."},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/plantdist.html","id":null,"dir":"Reference","previous_headings":"","what":"Dissimilarities of Some U.S. Nuclear Plants — plantdist","title":"Dissimilarities of Some U.S. Nuclear Plants — plantdist","text":"matrix gives discrepancies light water nuclear power plants two types, seven built site existing plant 19 built new sites.  discrepancies summarize differences two covariates predictive cost building plant.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/plantdist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dissimilarities of Some U.S. Nuclear Plants — plantdist","text":"","code":"plantdist"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/plantdist.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dissimilarities of Some U.S. Nuclear Plants — plantdist","text":"matrix 7 rows 19 columns","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/plantdist.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Dissimilarities of Some U.S. Nuclear Plants — plantdist","text":"data appear Cox, D.R. Snell, E.J. (1981),   Applied Statistics: Principles Examples, p.82 (Chapman   Hall), due W.E. Mooz.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/plantdist.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dissimilarities of Some U.S. Nuclear Plants — plantdist","text":"Rosenbaum, P.R. (2002), Observational Studies,   Second Edition, p.307 (Springer).","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/predict.CBPS.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Predict for CBPS objects — predict.CBPS","title":"(Internal) Predict for CBPS objects — predict.CBPS","text":"CBPS package fits ‘covariate balancing propensity score’ use propensity score weighting.  binary treatment case can also used matching.  method helps implement process manner consistent use propensity scores elsewhere optmatch; see scores documentation.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/predict.CBPS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Predict for CBPS objects — predict.CBPS","text":"","code":"# S3 method for class 'CBPS' predict(object, newdata = NULL, type = c(\"link\", \"response\"), ...)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/predict.CBPS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Predict for CBPS objects — predict.CBPS","text":"object CBPS object newdata Unused. type Return inverse logits fitted values (default) fitted values ... Unused.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/predict.CBPS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Predict for CBPS objects — predict.CBPS","text":"Inverse logit fitted values.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/print.optmatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Printing optmatch objects. — print.optmatch","title":"Printing optmatch objects. — print.optmatch","text":"Printing optmatch objects.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/print.optmatch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Printing optmatch objects. — print.optmatch","text":"","code":"# S3 method for class 'optmatch' print(x, quote = FALSE, grouped = FALSE, ...)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/print.optmatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Printing optmatch objects. — print.optmatch","text":"x optmatch object, returned fullmatch pairmatch. quote boolean indicating matched group names quoted (default quote). grouped logical indicating object printed style named factor object (grouped = TRUE) table group names members. ... Arguments passed print.default.","code":""},{"path":[]},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/print.optmatch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Printing optmatch objects. — print.optmatch","text":"","code":"data(nuclearplants) fm <- fullmatch(pr ~ t1 + t2, data = nuclearplants)  print(fm) #>    H    I    A    J    B    K    L    M    C    N    O    P    Q    R    S    T  #>  1.3  1.1  1.1  1.8  1.2  1.3  1.3  1.3  1.3  1.8  1.8  1.3  1.5  1.3  1.9 1.10  #>    U    D    V    E    W    F    X    G    Y    Z    d    e    f    a    b    c  #>  1.7  1.4  1.4  1.5  1.2  1.6  1.5  1.7  1.3  1.6  1.3  1.3  1.3  1.8  1.9 1.10  print(fm, grouped = TRUE) #>  Group                         Members #>    1.1                            I, A #>   1.10                            T, c #>    1.2                            B, W #>    1.3 H, K, L, M, C, P, R, Y, d, e, f #>    1.4                            D, V #>    1.5                         Q, E, X #>    1.6                            F, Z #>    1.7                            U, G #>    1.8                      J, N, O, a #>    1.9                            S, b"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/revise_ArcInfo_nodelabels.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset implicit node labels of an ArcInfo object — revise_ArcInfo_nodelabels","title":"Reset implicit node labels of an ArcInfo object — revise_ArcInfo_nodelabels","text":"Reset implicit node labels ArcInfo object","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/revise_ArcInfo_nodelabels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset implicit node labels of an ArcInfo object — revise_ArcInfo_nodelabels","text":"","code":"revise_ArcInfo_nodelabels(x, new, old_positions = 1L:length(new))"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/revise_ArcInfo_nodelabels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reset implicit node labels of an ArcInfo object — revise_ArcInfo_nodelabels","text":"x ArcInfo object new character; new node labels (level sets factors encoding arc start end nodes) old_positions integer; positions old levels new levels vector","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/revise_ArcInfo_nodelabels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reset implicit node labels of an ArcInfo object — revise_ArcInfo_nodelabels","text":"ArcInfo object new levels","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/revise_ArcInfo_nodelabels.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Reset implicit node labels of an ArcInfo object — revise_ArcInfo_nodelabels","text":"Ben Hansen","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/scoreCaliper.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Helper function to create an InfinitySparseMatrix from a set of scores, a treatment indicator, and a caliper width. — scoreCaliper","title":"(Internal) Helper function to create an InfinitySparseMatrix from a set of scores, a treatment indicator, and a caliper width. — scoreCaliper","text":"(Internal) Helper function create InfinitySparseMatrix set scores, treatment indicator, caliper width.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/scoreCaliper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Helper function to create an InfinitySparseMatrix from a set of scores, a treatment indicator, and a caliper width. — scoreCaliper","text":"","code":"scoreCaliper(x, z, caliper)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/scoreCaliper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Helper function to create an InfinitySparseMatrix from a set of scores, a treatment indicator, and a caliper width. — scoreCaliper","text":"x scores, vector indicating 1-D location unit. z treatment assignment vector (length x) caliper width caliper respect scores x.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/scoreCaliper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Helper function to create an InfinitySparseMatrix from a set of scores, a treatment indicator, and a caliper width. — scoreCaliper","text":"InfinitySparseMatrix object, suitable   passed match_on within argument.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/scores.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract scores (propensity, prognostic,...) from a fitted model — scores","title":"Extract scores (propensity, prognostic,...) from a fitted model — scores","text":"wrapper predict, adapted use matching.  Given fitted model explicit newdata ‘predict’ , constructs newdata manner generally better suited matching.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract scores (propensity, prognostic,...) from a fitted model — scores","text":"","code":"scores(object, newdata = NULL, ...)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract scores (propensity, prognostic,...) from a fitted model — scores","text":"object fitted model object determining scores generated. newdata (optional) data frame containing variables scores produced. ... additional arguments passed predict.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract scores (propensity, prognostic,...) from a fitted model — scores","text":"See individual predict functions.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/scores.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract scores (propensity, prognostic,...) from a fitted model — scores","text":"Like predict, default predictions glm scale linear predictor, scale response; see Rosenbaum \\ Rubin (1985).  (default can overridden specifying type=\"response\".) contrast predict, scores given explicit newdata argument attempts reconstruct one context called, rather first argument.  example, called within formula argument call glm, newdata data frame glm evaluates formula , opposed model frame associated object.  See Examples. handling missing independent variables also differs predict two ways. First, data used generate object NA values, mean-imputed using fill.NAs. Secondly, newdata (either explicit argument, implicit data generated object) NA values, likewise mean-imputed using fill.NAs.  Also, missingness flags added formula object, re-fit, using fill.NAs, prior calling predict. newdata specified contains missing data, scores returns value predict.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/scores.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Extract scores (propensity, prognostic,...) from a fitted model — scores","text":"P.~R. Rosenbaum D.~B. Rubin (1985), ‘Constructing   control group using multivariate matched sampling methods incorporate   propensity score’, American Statistician, 39 33–38.","code":""},{"path":[]},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/scores.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract scores (propensity, prognostic,...) from a fitted model — scores","text":"Josh Errickson","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/scores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract scores (propensity, prognostic,...) from a fitted model — scores","text":"","code":"data(nuclearplants) pg <- lm(cost~., data=nuclearplants, subset=(pr==0)) # The following two lines produce identical results. ps1 <- glm(pr~cap+date+t1+bw+predict(pg, newdata=nuclearplants),            data=nuclearplants) #> Warning: prediction from rank-deficient fit; attr(*, \"non-estim\") has doubtful cases ps2 <- glm(pr~cap+date+t1+bw+scores(pg), data=nuclearplants) #> Warning: prediction from rank-deficient fit; attr(*, \"non-estim\") has doubtful cases"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/setFeasibilityConstants.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Sets up the default values for maximum feasible problems — setFeasibilityConstants","title":"(Internal) Sets up the default values for maximum feasible problems — setFeasibilityConstants","text":"(Internal) Sets default values maximum feasible problems","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/setFeasibilityConstants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Sets up the default values for maximum feasible problems — setFeasibilityConstants","text":"","code":"setFeasibilityConstants()"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/setMaxProblemSize.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the maximum problem size — setMaxProblemSize","title":"Set the maximum problem size — setMaxProblemSize","text":"Helper function ease setting largest problem size accepted pairmatch fullmatch.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/setMaxProblemSize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the maximum problem size — setMaxProblemSize","text":"","code":"setMaxProblemSize(size = Inf)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/setMaxProblemSize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the maximum problem size — setMaxProblemSize","text":"size Positive integer, Inf","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/setMaxProblemSize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set the maximum problem size — setMaxProblemSize","text":"function sets optmatch_max_problem_size global option. option ships option pre-set value relatively small, smaller modern computers can handle.  Invoking function argument re-sets optmatch_max_problem_size option Inf, effectively disabling checks problem size.  Unless working older computer, probably makes sense users , least determine problem sizes large machines. (know R crashes, simply takes long taste.) determine size problem without subproblems, .e. exact matching categories, use match_on set store problem distance, apply length result. exact matching constraints imposed creation distance, want look largest size subproblem.  Apply findSubproblems distance, creating list, say dlist, distances; sapply(dlist, length) determine sizes subproblems.","code":""},{"path":[]},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/setMaxProblemSize.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set the maximum problem size — setMaxProblemSize","text":"Ben B. Hansen","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/setTryRecovery.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Sets up option to try recovery in fullmatch. — setTryRecovery","title":"(Internal) Sets up option to try recovery in fullmatch. — setTryRecovery","text":"(Internal) Sets option try recovery fullmatch.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/setTryRecovery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Sets up option to try recovery in fullmatch. — setTryRecovery","text":"","code":"setTryRecovery()"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/show-BlockedInfinitySparseMatrix-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Displays a BlockedInfinitySparseMatrix — show,BlockedInfinitySparseMatrix-method","title":"Displays a BlockedInfinitySparseMatrix — show,BlockedInfinitySparseMatrix-method","text":"Displays block BlockedInfinitySparseMatrix separately.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/show-BlockedInfinitySparseMatrix-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Displays a BlockedInfinitySparseMatrix — show,BlockedInfinitySparseMatrix-method","text":"","code":"# S4 method for class 'BlockedInfinitySparseMatrix' show(object)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/show-BlockedInfinitySparseMatrix-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Displays a BlockedInfinitySparseMatrix — show,BlockedInfinitySparseMatrix-method","text":"object BlockedInfinitySparseMatrix print.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/show-InfinitySparseMatrix-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Displays an InfinitySparseMatrix — show,InfinitySparseMatrix-method","title":"Displays an InfinitySparseMatrix — show,InfinitySparseMatrix-method","text":"Specifically, displays InfinitySparseMatrix converting matrix first.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/show-InfinitySparseMatrix-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Displays an InfinitySparseMatrix — show,InfinitySparseMatrix-method","text":"","code":"# S4 method for class 'InfinitySparseMatrix' show(object)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/show-InfinitySparseMatrix-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Displays an InfinitySparseMatrix — show,InfinitySparseMatrix-method","text":"object InfinitySparseMatrix print.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/sort.ism.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort the internal structure of an InfinitySparseMatrix. — sort.InfinitySparseMatrix","title":"Sort the internal structure of an InfinitySparseMatrix. — sort.InfinitySparseMatrix","text":"Internally, InfinitySparseMatrix (Blocked non) comprises vectors values, row positions, column positions. ordering vectors enforced. function sorts internal structure, leaving external structure unchanged (e.g. .matrix(ism) .matrix(sort(ism)) look identical despite sorting.)","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/sort.ism.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort the internal structure of an InfinitySparseMatrix. — sort.InfinitySparseMatrix","text":"","code":"# S3 method for class 'InfinitySparseMatrix' sort(x, decreasing = FALSE, ..., byCol = FALSE)  # S3 method for class 'BlockedInfinitySparseMatrix' sort(x, decreasing = FALSE, ..., byCol = FALSE)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/sort.ism.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort the internal structure of an InfinitySparseMatrix. — sort.InfinitySparseMatrix","text":"x InfinitySparseMatrix BlockedInfinitySparseMatrix. decreasing Logical. sort increasing decreasing? Default FALSE. ... Additional arguments ignored. byCol Logical. Defaults FALSE, returned ISM row-dominant. TRUE returns column-dominant ISM.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/sort.ism.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort the internal structure of an InfinitySparseMatrix. — sort.InfinitySparseMatrix","text":"object class x sorted according   byCol.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/sort.ism.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sort the internal structure of an InfinitySparseMatrix. — sort.InfinitySparseMatrix","text":"default, InfinitySparseMatrix row-dominant, meaning row positions sorted first, column positions sorted within row. Use argument byCol change .","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/standardization_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"pooled dispersion for a numeric variable — standardization_scale","title":"pooled dispersion for a numeric variable — standardization_scale","text":"Dispersion pooled across treatment control group. default, measure dispersion calculated within group ordinary standard deviation stats::sd rather robust alternative encoded stats::mad.  dispersion measurements combined squaring, averaging weights proportional one minus sizes groups taking square roots.  Used match_on.glm.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/standardization_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pooled dispersion for a numeric variable — standardization_scale","text":"","code":"standardization_scale(x, trtgrp, standardizer = NULL, svydesign_ = NULL)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/standardization_scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pooled dispersion for a numeric variable — standardization_scale","text":"x numeric variable trtgrp logical numeric. numeric, coerced logical via ! standardizer function, NULL numeric length 1 svydesign_ ordinarily NULL, may also survey.design2; see Details.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/standardization_scale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"pooled dispersion for a numeric variable — standardization_scale","text":"numeric length 1","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/standardization_scale.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"pooled dispersion for a numeric variable — standardization_scale","text":"non-NULL svydesign_ parameter indicates dispersion calculations made respecting weighting scheme implicit survey.design2 object. standardizer NULL, one gets calculation style stats::mad weights, performed optmatch:::svy_sd; pooling weighted standard deviations, one pass non-NULL svydesign_ parameter along standardizer=optmatch:::svy_sd. (generally, provided standardizer function accept sole argument survey.design2 object, nrows(svydesign_$variables) equal lengths x trtgrp.  object expected carry numeric variable ‘x’, standardizer function return dispersion variable.)","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/strata.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Stratafication Variables — strata","title":"Identify Stratafication Variables — strata","text":"special function used identifying strata variables defining exactMatch call fullmatch, pairmatch, match_on. called externally.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/strata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Stratafication Variables — strata","text":"","code":"strata(...)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/strata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Stratafication Variables — strata","text":"... number variables length.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/strata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Stratafication Variables — strata","text":"variables appropriate labels","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/strata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Stratafication Variables — strata","text":"","code":"data(nuclearplants) fullmatch(pr ~ cost + strata(pt), data = nuclearplants) #>   H   I   A   J   B   K   L   M   C   N   O   P   Q   R   S   T   U   D   V   E  #> 0.3 0.3 0.1 0.2 0.2 0.4 0.4 0.4 0.3 0.6 0.4 0.1 0.1 0.5 0.1 0.1 0.6 0.4 0.6 0.5  #>   W   F   X   G   Y   Z   d   e   f   a   b   c  #> 0.7 0.6 0.7 0.7 0.3 0.6 1.2 1.1 1.3 1.1 1.2 1.3"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/stratumStructure.html","id":null,"dir":"Reference","previous_headings":"","what":"Return structure of matched sets — stratumStructure","title":"Return structure of matched sets — stratumStructure","text":"Tabulate treatment:control ratios occurring matched sets, frequency occurrence.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/stratumStructure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return structure of matched sets — stratumStructure","text":"","code":"stratumStructure(stratum, trtgrp = NULL, min.controls = 0, max.controls = Inf)  # S3 method for class 'optmatch' stratumStructure(stratum, trtgrp, min.controls = 0, max.controls = Inf)  # Default S3 method stratumStructure(stratum, trtgrp, min.controls = 0, max.controls = Inf)  # S3 method for class 'stratumStructure' print(x, ...)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/stratumStructure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return structure of matched sets — stratumStructure","text":"stratum Matched strata, returned fullmatch pairmatch trtgrp Dummy variable treatment group membership.  (required stratum optmatch object, returned fullmatch pairmatch.) min.controls display, number treatment group members per stratum truncated reciprocal min.controls. max.controls display, number control group members truncated max.controls. x stratumStructure object printed. ... Additional arguments print.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/stratumStructure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return structure of matched sets — stratumStructure","text":"table showing frequency occurrence   treatment:control ratios occur. ‘effective sample size’ stratification,   matched pairs.  Given attribute table, named   ‘comparable.num.matched.pairs’; see Note.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/stratumStructure.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Return structure of matched sets — stratumStructure","text":"comparing treatment control groups size 10,   say, stratification consisting two strata, one 9   treatments 1 control, smaller ‘effective sample   size’, intuitively, stratification 10 matched pairs,   despite fact contain 20 subjects   total. stratumStructure first summarizes aspect   structure stratification given, goes   identify one number stratification's effective sample   size.  ‘comparable.num.matched.pairs’   attribute returned stratumStructure sum   harmonic means sizes treatment control   subgroups stratum, general way calibrating   differences well differences number subjects   contained stratification.  example, metric   9:1, 1:9 stratification comparable 3.6 matched pairs. effective sample size calculated way?    phrase ‘effective sample size’ suggests observations   taken similar information content.  Modeling   random variables, suggests assumed   variance, \\(\\sigma\\), conditional   stratum reside .  case, also   treatment control observations differ expectation   constant stratum, can shown   optimum weights combine treatment-control   contrasts across strata, \\(s\\), proportional   stratum-wise harmonic means treatment control counts,   \\(h_s = [(n_{ts}^{-1} + n_{cs}^{-1})/2]^{-1}\\) (Kalton, 1968).  thus-weighted   average contrasts variance \\(2\\sigma/\\sum_s   h_s\\). motivates use \\(\\sum_s   h_s\\) measure effective sample size (Hansen, 2011).   Somewhat different motivations calculation appear   Hansen (2004) Hansen Bowers (2008).  Since   matched pair \\(s\\), \\(h_s=1\\), \\(\\sum_s   h_s\\) can thought number matched pairs   needed attain comparable precision.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/stratumStructure.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Return structure of matched sets — stratumStructure","text":"Kalton, G. (1968), ‘Standardization:   technique control extraneous variables’, Applied   Statistics, 17, 118–136. Hansen, B.B. (2004), ‘Full Matching Observational   Study Coaching SAT’, Journal American   Statistical Association, 99, 609–618. Hansen B.B. Bowers, J. (2008), ‘Covariate balance   simple, stratified clustered comparative studies’,   Statistical Science, 23 (2), 219–236. Hansen, B.B. (2011), ‘Propensity score matching extract   latent experiments nonexperimental data: case study’.   Ch. 9 Looking Backwards: Proceedings Conference   Honor Paul W. Holland, Springer.","code":""},{"path":[]},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/stratumStructure.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Return structure of matched sets — stratumStructure","text":"Ben B. Hansen","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/stratumStructure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return structure of matched sets — stratumStructure","text":"","code":"data(plantdist) plantsfm <- fullmatch(plantdist) # A full match with unrestricted #> Warning: Without 'data' argument the order of the match is not guaranteed #>     to be the same as your original data.                                  # treatment-control balance plantsfm1 <- fullmatch(plantdist,min.controls=2, max.controls=3) #> Warning: Without 'data' argument the order of the match is not guaranteed #>     to be the same as your original data. stratumStructure(plantsfm) #> 1:1 1:2 1:3 1:4 1:6  #>   2   2   1   1   1  stratumStructure(plantsfm1) #> 1:2 1:3  #>   2   5  stratumStructure(plantsfm, max.controls=4) #>  1:1  1:2  1:3 1:4+  #>    2    2    1    2"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/subdim-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the dimension of each valid subproblem — subdim","title":"Returns the dimension of each valid subproblem — subdim","text":"Returns list containing dimensions valid subproblems.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/subdim-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the dimension of each valid subproblem — subdim","text":"","code":"subdim(x)  # S3 method for class 'InfinitySparseMatrix' subdim(x)  # S3 method for class 'matrix' subdim(x)  # S3 method for class 'BlockedInfinitySparseMatrix' subdim(x)  # S3 method for class 'optmatch.dlist' subdim(x)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/subdim-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the dimension of each valid subproblem — subdim","text":"x distance specification get sub-dimensions .","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/subdim-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the dimension of each valid subproblem — subdim","text":"data frame listing dimensions valid subproblem. subproblems 0 controls 0 treatments ignored. names entries list names subproblems, exist.  two rows, named \"treatments\" \"controls\".","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/subdim-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns the dimension of each valid subproblem — subdim","text":"","code":"em <- exactMatch(pr ~ pt, data=nuclearplants) m1 <- fullmatch(pr ~ t1 + t2, within=em, data=nuclearplants) stratumStructure(m1) #>  1:1  1:2  1:3 1:10  #>    7    1    1    1  (subdims_em <- subdim(em)) #>             0 1 #> treatments  7 3 #> controls   19 3 m2 <- fullmatch(pr ~ t1 + t2, within=em, data=nuclearplants,                 mean.controls=pmin(1.5, subdims_em[\"controls\",] / subdims_em[\"treatments\",])                 ) stratumStructure(m2) #> 1:1 1:2 1:3 0:1  #>   7   2   1   8"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/subproblemSuccess.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Report successful subproblems. — subproblemSuccess","title":"(Internal) Report successful subproblems. — subproblemSuccess","text":"fullmatch can break large matching problem smaller subproblems (example, using strata defined exactMatch). function lists subproblems match list whether least treated unit matched subproblem. Subproblems matched treated units said \"failed.\"","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/subproblemSuccess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Report successful subproblems. — subproblemSuccess","text":"","code":"subproblemSuccess(x)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/subproblemSuccess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Report successful subproblems. — subproblemSuccess","text":"x result fullmatch pairmatch.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/subproblemSuccess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Report successful subproblems. — subproblemSuccess","text":"named logical vector indicating either success failure subproblem.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/summary.ism.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize a distance matrix — summary.ism","title":"Summarize a distance matrix — summary.ism","text":"Given distance matrix, return information , including dimension, sparsity information, unmatchable members, summary finite distances, , case BlockedInfinitySparseMatrix, block structure.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/summary.ism.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize a distance matrix — summary.ism","text":"","code":"# S3 method for class 'InfinitySparseMatrix' summary(object, ..., distanceSummary = TRUE)  # S3 method for class 'BlockedInfinitySparseMatrix' summary(   object,   ...,   distanceSummary = TRUE,   printAllBlocks = FALSE,   blockStructure = TRUE )  # S3 method for class 'DenseMatrix' summary(object, ..., distanceSummary = TRUE)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/summary.ism.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize a distance matrix — summary.ism","text":"object InfinitySparseMatrix, BlockedInfinitySparseMatrix DenseMatrix. ... Ignored. distanceSummary Default TRUE. summary minimum distance per treatment member calculated? May slow larger data sets. printAllBlocks object BlockedInfinitySparseMatrix, summaries blocks printed alongside overall summary? Default FALSE. blockStructure object BlockedInfinitySparseMatrix printAllBlocks false, print quick summary individual block. Default TRUE. number blocks high, consider suppressing .","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/summary.ism.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize a distance matrix — summary.ism","text":"named list. summary   InfinitySparseMatrix DenseMatrix contains   following:  total: Contains total number treatment control members, well eligible ineligible matches. matchable: names treatment control members least one eligible match. unmatchable: names treatment control members eligible matches. distances: summary minimum matchable distances, distanceSummary TRUE. BlockedInfinitySparseMatrix, named list   instead contains one entry per block, named block   (.e. value blocking variable) well block   named 'overall' contains summary ignoring blocks.   entries contains list entries 'total',   'matchable', 'unmatchable' 'distances', described .","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/summary.ism.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize a distance matrix — summary.ism","text":"output consists several pieces. Membership: Indicates dimension distance. Total ()eligible potential matches: measure sparsity  distance. Eligible matches finite distance treatment  control members; matched. Ineligible matches Inf  distance can matched. higher number ineligible matches can  speed matching, runs risk less optimal overall matching  results. Unmatchable treatment/control members: observations  eligible matches (e.g. distance every potential match  Inf) listed . See Value details  access lists matchable unmatchable treatment control members. Summary minimum matchable distance per treatment member: assist  choosing caliper, numeric summary smallest distance  per matchable treatment member. provide caliper less  maximum value, least one treatment member become unmatchable. Block structure: BlockedInfinitySparseMatrix, quick summary structure individual block. (across blocks.) may indicate blocks, , problematic.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/update.optmatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs an update on an optmatch object. — update.optmatch","title":"Performs an update on an optmatch object. — update.optmatch","text":"NB: CODE CURRENTLY MUCH ALPHA SOMEWHAT UNTESTED, ESPECIALLY CALLING update OPTMATCH OBJECT CREATED WITHOUT EXPLICIT DISTANCE ARGUMENT.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/update.optmatch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs an update on an optmatch object. — update.optmatch","text":"","code":"# S3 method for class 'optmatch' update(object, ...)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/update.optmatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs an update on an optmatch object. — update.optmatch","text":"object Optmatch object update. ... Additional arguments call, arguments changed values.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/update.optmatch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs an update on an optmatch object. — update.optmatch","text":"updated optmatch object.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/update.optmatch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Performs an update on an optmatch object. — update.optmatch","text":"Note passing data strongly recommended. warning printed hash data used generate optmatch object differs hash new data. obtain updated call without performing actual update, pass additional evaluate = FALSE argument.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/validDistanceSpecification.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Validate that objects are valid distance specifications. — validDistanceSpecification","title":"(Internal) Validate that objects are valid distance specifications. — validDistanceSpecification","text":"functions fullmatch pairmatch create optimal matches treated control units given matrix (similar representation) distances treated control units. distance specifications must implement certain generic functions. function checks necessary methods exist object can used specify distances way matching functions can use.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/validDistanceSpecification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Validate that objects are valid distance specifications. — validDistanceSpecification","text":"","code":"validDistanceSpecification(distance, stopOnProblem = TRUE)"},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/validDistanceSpecification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Validate that objects are valid distance specifications. — validDistanceSpecification","text":"distance object test. stopOnProblem TRUE (default) function raise error invalid objects. Otherwise, returns logical.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/reference/validDistanceSpecification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Validate that objects are valid distance specifications. — validDistanceSpecification","text":"logical","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"changes-in-optmatch-version-0108","dir":"Changelog","previous_headings":"","what":"Changes in optmatch Version 0.10.8","title":"Changes in optmatch Version 0.10.8","text":"CRAN release: 2024-09-19 Updates internal C++ code.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"changes-in-optmatch-version-0107","dir":"Changelog","previous_headings":"","what":"Changes in optmatch Version 0.10.7","title":"Changes in optmatch Version 0.10.7","text":"CRAN release: 2023-11-15 Hardened tests package unavailability Changed name default arguments version predict. (#223) Several small documentation tweaks pass CRAN checks R-devel. Fix bug introduced version 0.10.6, involving discretization distances. fix avoids spurious errors distance matrices large values, although may still pass tol= arguments pairmatch() fullmatch() smaller desired tolerance.(#230) Disable passing local variables generic corresponding change R_USEMETHOD_FORWARD_LOCALS coming next major release. user-facing change, except @call slot objects may look slighly different (function identically). (#234)","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"changes-in-optmatch-version-0106","dir":"Changelog","previous_headings":"","what":"Changes in optmatch Version 0.10.6","title":"Changes in optmatch Version 0.10.6","text":"CRAN release: 2023-02-07 Adjusted check avoid ambiguous failures using LEMON vs RELAX-IV. Updated CITATION use bibentry(). Minor tweaks address failing tests.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"changes-in-optmatch-version-0105","dir":"Changelog","previous_headings":"","what":"Changes in optmatch Version 0.10.5","title":"Changes in optmatch Version 0.10.5","text":"CRAN release: 2022-08-15 Minor revision address failing test.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"changes-in-optmatch-version-0104","dir":"Changelog","previous_headings":"","what":"Changes in optmatch Version 0.10.4","title":"Changes in optmatch Version 0.10.4","text":"CRAN release: 2022-08-09 including factor variables right hand side formula passed match_on(), now simply calculates contrast enable intuitive results. (Thanks Noah Greifer, #220) dbind() now properly support binding 26 unique matrices renaming necessary; fact supports 18,278 uniquely renamed matrices. tweaks documentation, testing vignettes satisfy CRAN requirements harden loss dependencies.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"changes-in-optmatch-version-0103","dir":"Changelog","previous_headings":"","what":"Changes in optmatch Version 0.10.3","title":"Changes in optmatch Version 0.10.3","text":"CRAN release: 2022-05-16","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"interface-changes-0-10-3","dir":"Changelog","previous_headings":"","what":"Interface changes","title":"Changes in optmatch Version 0.10.3","text":"rank Mahalanobis distance created match_on() using argument method = \"rank_mahalanobis\" accidentally returning squared distance rather distance. fixed. recover results using squared distance, square results, e.g.: match_on(..., method =   \"rank_mahalanobis\")^2. (Thanks Noah Greifer #218) New function .list.BlockedInfinitySparseMatrix() split single BlockedInfinitySparseMatrix list InfinitySparseMatrix based upon separate blocks. (Called via .list(b) b BlockedInfinitySparseMatrix.) New function dbind() binding several distance matrices single BlockedInfinitySparseMatrix. Valid inputs include distance convertible InfinitySparseMatrix, BlockedInfinitySparseMatrix, lists . (#65)","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"infrastructure-changes-0-10-3","dir":"Changelog","previous_headings":"","what":"Infrastructure changes","title":"Changes in optmatch Version 0.10.3","text":"Manually correcting License_is_FOSS License_restricts_use flags 0.10.0 transition open license. Implemented optmatch::strata used place survival::strata. Loading survival masking strata cause issues either. Hashing distance matrixes now done internally. RItools survey now suggested appropriate warnings users attempt utilize code without first installing packages. Modernized vignettes (Note: 0.10.1 0.10.2 functionally equivalent releases updated address issue CRAN License_is_FOSS License_restricts_use flags.)","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"changes-in-optmatch-version-0100","dir":"Changelog","previous_headings":"","what":"Changes in optmatch Version 0.10.0","title":"Changes in optmatch Version 0.10.0","text":"CRAN release: 2022-03-15","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"major-changes-0-10-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"Changes in optmatch Version 0.10.0","text":"optmatch longer includes RELAX-IV solver internally. solver can still used installing new rrelaxiv package (hosted CRAN). rrelaxiv available, optmatch instead uses min-cost flow solver provided LEMON project, https://lemon.cs.elte.hu/trac/lemon; bindings provided rlemon package. user interface remains , new optional argument specifying solver use. limited testing, ’ve seen similar matching results new solver. rlemon package offers bindings four LEMON solvers. See help(fullmatch) discussion , new argument fullmatch(), solver =. continue using RELAX-IV solver, whether back-compatibility matter preference, install rrelaxiv package, https://errickson.net/rrelaxiv/. rrelaxiv installed, RELAX-IV become default solver automatically.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"minor-changes-0-10-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"Changes in optmatch Version 0.10.0","text":"Remove dependence digest package generating hashes distance matrices. RItools moved Suggests instead Imports.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"changes-in-optmatch-version-09-17","dir":"Changelog","previous_headings":"","what":"Changes in optmatch Version 0.9-17","title":"Changes in optmatch Version 0.9-17","text":"CRAN release: 2022-02-22 Fix FORTRAN conform Writing R Extensions §6.6.2. Observations NAs blocking variable now retained, although marked unmatchable (#206). similarly observations NAs scalar matching variable (#189). Minor bug fix(es) incl. #211, #204","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"changes-in-optmatch-version-09-16","dir":"Changelog","previous_headings":"","what":"Changes in optmatch Version 0.9-16","title":"Changes in optmatch Version 0.9-16","text":"Bug fix: integer overflow issue arising large problems (#209) Minor refinement support glms survey::svyglm() (#194)","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"changes-in-optmatch-version-09-15","dir":"Changelog","previous_headings":"","what":"Changes in optmatch Version 0.9-15","title":"Changes in optmatch Version 0.9-15","text":"CRAN release: 2021-08-17 Small bug fix related survey::mad survey::med interface","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"changes-in-optmatch-version-09-14","dir":"Changelog","previous_headings":"","what":"Changes in optmatch Version 0.9-14","title":"Changes in optmatch Version 0.9-14","text":"CRAN release: 2021-05-26 Bug fix: within= arguments match_on(), functions calling match_on() pairmatch() fullmatch(), sometimes ignored (#181). Binary operations sparse matching distances now compare dimnames two proceeding (#190). Bug fix: fullmatch() pairmatch() found infeasible create matches within exact matching category, circumstances members category placed single category labeled 1.NA, 2.NA etc. Instead, members category now NA (#203). Fixed bug causing match_on(), scores() misinterpret propensity scores fitted survey::svyglm() (#194). boxplot() gains method svyglm objects, e.g. propensity score models fitted case weights via survey::svyglm() (#194). meaning one match_on.glm()’s arguments changed slightly: circumvent scale standardization matching propensity score index, now pass standardization.scale = 1, standardization.scale = NULL (#194).","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"changes-in-optmatch-version-09-12","dir":"Changelog","previous_headings":"","what":"Changes in optmatch Version 0.9-12","title":"Changes in optmatch Version 0.9-12","text":"CRAN release: 2019-10-11 Fixed bug causing summary.optmatch() fail b/c NAs treatment variable (#155). Fixed bug using custom distance functions (#180) updated documentation related custom distance functions. Fixed minor compatibility error R-devel math operations sparse distance matrices (#179).","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"changes-in-optmatch-version-09-11","dir":"Changelog","previous_headings":"","what":"Changes in optmatch Version 0.9-11","title":"Changes in optmatch Version 0.9-11","text":"CRAN release: 2019-07-12 Added exclude argument match_on() mirroring exclude argument caliper(). Optmatch objects now support update() function, update.Optmatch(). (#54) Optmatch objects can combined via c() function, c.Optmatch(). (#68) Added support labelled treatment vectors often arise importing Stata SPSS. (#159) Introduced informative error messages situations. (#149, #104) Better handling NA’s variables involved matching/calipering/exactMatching. (#147) Fixed bug incorrect results matchfailed(). (#175)","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"changes-in-optmatch-version-09-10","dir":"Changelog","previous_headings":"","what":"Changes in optmatch Version 0.9-10","title":"Changes in optmatch Version 0.9-10","text":"CRAN release: 2018-07-12 Minor release fix warnings CRAN checks.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"changes-in-optmatch-version-09-9","dir":"Changelog","previous_headings":"","what":"Changes in optmatch Version 0.9-9","title":"Changes in optmatch Version 0.9-9","text":"CRAN release: 2018-05-14 Fixed bug caused effective sample size rounded aggresively summary.optmatch(). Improved several error messages warnings. (#138, #149, #142) Fixed use (vectorOfThings) usage give error upcoming R release.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"changes-in-optmatch-version-09-8","dir":"Changelog","previous_headings":"","what":"Changes in optmatch Version 0.9-8","title":"Changes in optmatch Version 0.9-8","text":"CRAN release: 2018-01-16 pairmatch asked match within stratum fewer eligible controls controls times number treatments, now attempts match stratum leaving treatment units. (#116) treatment indicator must either numeric 0/1 (1 treatment, 0 control) logical (TRUE treatment, FALSE control). Support type treatment vector (factors, character, numerical values) deprecated. can easily update treatment vectors using conditional statements, e.g. character “T” “C”, treatment_new = treatment == \"T\". treatment indicator can now include NA’s. observations NA treatment status excluded distances matrices never match. WARNING: data argument excluded fullmatch() pairmatch() num_NA > 0 entries treatment status vector NA, length vector produced fullmatch() pairmatch() won’t match length treatment status vector, num_NA fewer observations. Don’t forget pass data argument! Fixed bug affecting rank Mahalanobis matching combination calipers /exact matching constraints (#128) Addressed issue affecting certain problems exact matching caliper restrictions, min.controls/mean.controls/max.controls directives mistakenly applied wrong subclasses, resulting strange warnings , potentially, spurious match failures unintended structural restrictions subclasses (#129). Structural restrictions allowing many-one matches longer cause fullmatch() automatically fail. .e. ’ve restored behaviour software prior version 0.8. (#132)","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"changes-in-optmatch-version-09-7","dir":"Changelog","previous_headings":"","what":"Changes in optmatch Version 0.9-7","title":"Changes in optmatch Version 0.9-7","text":"CRAN release: 2016-12-29 Added support CBPS created objects (#121). Improvments documentation several functions. Several small bugfixes.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"changes-in-optmatch-version-09-6","dir":"Changelog","previous_headings":"","what":"Changes in optmatch Version 0.9-6","title":"Changes in optmatch Version 0.9-6","text":"CRAN release: 2016-05-03 New material vignettes, general use package import/export matching results material R SAS Stata (Josh Errickson). New summary() methods InfinitySparseMatrix (summary.InfinitySparseMatrix()), BlockedInfinitySparseMatrix, (summary.BlockedInfinitySparseMatrix()) DenseMatrix (summary.DenseMatrix()). .e., can call summary() result call match_on() caliper(). information returns may useful selecting caliper widths, managing computational burdens large matching problems. Streamlined combinations exact propensity score matching. include “+ strata(fac)” right hand side propensity scoring model formula, pass fitted model pairmatch(), fullmatch() match_on(), factor “fac” serve independent variable propensity model exact matching variable (#101). See examples help documentation fullmatch(). pairmatch() fullmatch() longer generate “matched.distances” attributes results. get information, use matched.distances(). (Internal) methods sorting InfinitySparseMatrix’s Deprecated: support passing results fill.NAs() directly glm() similar. Use traditional formula data argument version. See help documentation fill.NAs() examples. Fixed: Rcpp incompatibilities OSX users (4bbcaca); boxplot() method fitted propensities ignoring varwidth argument (#113); various minor issues affecting package development deployment (#110,…).","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"changes-in-optmatch-version-09-5","dir":"Changelog","previous_headings":"","what":"Changes in optmatch Version 0.9-5","title":"Changes in optmatch Version 0.9-5","text":"CRAN release: 2015-07-31 Documentation adjustments. Explicit print method output explicit calls stratumStructure().","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"changes-in-optmatch-version-09-4","dir":"Changelog","previous_headings":"","what":"Changes in optmatch Version 0.9-4","title":"Changes in optmatch Version 0.9-4","text":"Significant speed math operations sparse distance objects (Josh Buckner). Introducing contr.match_on(), new default contrasts function making Mahalanobis Euclidean distances. Previously used R defaults, () generated different answers factor depending ordering levels (b) led different distances {0,1}-valued numeric variables two level factors. (#80) match_on now takes strata element formula. Now users can write: match_on(z ~ x1 + x2 + strata(exactMatchVar)) Instead match_on(z ~ x1 + x2, within = exactMatch(z ~ exactMatchVar)) Fixed bug giving spurious infeasibility warnings, sample size reductions using fullmatch() feasible combinations min.controls, mean.controls/max.controls max.controls (#92) Various small bug fixes documentation improvements.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"changes-in-optmatch-version-09-3","dir":"Changelog","previous_headings":"","what":"Changes in optmatch Version 0.9-3","title":"Changes in optmatch Version 0.9-3","text":"CRAN release: 2014-08-13 Fixed memory issues, potential segfaults solver code. (Thank , Peter Solenberger). Fixed bug dropping cases extraneous NAs using fullmatch() pairmatch() create distance specifications directly. Fixed bug (#83) glm() method match_on() caused observations fixable NAs dropped often. New function distUnion() allows combining arbitrary distance specifications. New function antiExactMatch() provides matches may occur treated control units different values factor variable. opposite exactMatch(), ensures matches occur within factor levels. Can now infer data argument cases using summary() method RItools package present. Additional warnings clarifications.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"changes-in-optmatch-version-09-2","dir":"Changelog","previous_headings":"","what":"Changes in optmatch Version 0.9-2","title":"Changes in optmatch Version 0.9-2","text":"Fixed issue #74 properly setting omit.fraction argument unmatched controls. Improvements minExactMatch() function. Added optmatch_verbose_message option provide additional warnings. Fixed crash NULL NA vectors passed arguments fullmatch(). Added argument caliper() function allows returning values fit caliper instead just indicators entries fit caliper width. Calipers widths can given per-treated unit, instead globally. Additional binary operators sparse matrix representations. Added new ranked Mahalanobis method formula method match_on().","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"changes-in-optmatch-version-09-1","dir":"Changelog","previous_headings":"","what":"Changes in optmatch Version 0.9-1","title":"Changes in optmatch Version 0.9-1","text":"CRAN release: 2013-11-01 Subsetting Optmatch objects now preserves (subsets) subproblem attribute. Performance improvements match_on applied glm’s. solver update version 0.9-0 bug circumstances caused hangups malloc’s [Issue #70]. believe now fixed – please notify maintainer continue experience problem. (, ’ll reward easy workaround.)","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"changes-in-optmatch-version-09-0","dir":"Changelog","previous_headings":"","what":"Changes in optmatch Version 0.9-0","title":"Changes in optmatch Version 0.9-0","text":"CRAN release: 2013-08-10","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"new-features-0-9-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"Changes in optmatch Version 0.9-0","text":"Solver limits now depend machine limits, arbitrary constants defined optmatch maintainers. large problems, users see warning, solver attempt solve. fullmatch() pairmatch() can now take distance generating arguments directly, instead first call match_on(). See documentation two functions details. Infeasibility recovery fullmatch(). passing combination constraints (e.g. max.controls) make matching infeasible, fullmatch() now attempt find feasible match respects constraints, likely result omitting controls units. additional argument fullmatch(), mean.controls, alternative previous omit.fraction. (one two arguments can presented.) match attempt average mean.controls number controls per treatment. Optmatch object now carries constraints used generate (e.g. max.controls) well hashed version distance matched , help debugging/error checking avoiding carry entire distance matrix around. Creating distance matrix prior matching now optional. fullmatch() now accepts arguments match_on() create distance, create match behind scenes. Performance enhancements distance calculations. Several new utility functions, including subdim(), optmatch_restrictions(), optmatch_same_distance(), num_eligible_matches(). See help documentation additional details. Arithmetic operations InfinitySparseMatrices vectors supported. operation carried column vector steps. scores() function allows including model predictions (propensity scores) formulas directly (combining multiple propensity scores). scores() function preferred predict() makes several smart choices avoid dropping observations due partial missingness useful preparations matching.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"bug-fixes-0-9-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"Changes in optmatch Version 0.9-0","text":"match_on() now S3 generic function, solves several bugs using propensity models packages. summary() method giving overly pessimistic warnings failures. fixed bug Optmatch objects printing.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"deprecated-and-defunct-0-9-0","dir":"Changelog","previous_headings":"","what":"DEPRECATED AND DEFUNCT","title":"Changes in optmatch Version 0.9-0","text":"mdist() now deprecated, favor match_on().","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"changes-in-optmatch-version-08-3","dir":"Changelog","previous_headings":"","what":"Changes in optmatch Version 0.8-3","title":"Changes in optmatch Version 0.8-3","text":"CRAN release: 2013-05-16 Changes make examples compatible PDF manual","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"changes-in-optmatch-version-08-2","dir":"Changelog","previous_headings":"","what":"Changes in optmatch Version 0.8-2","title":"Changes in optmatch Version 0.8-2","text":"full() pair() now aliases fullmatch() pairmatch() match_on() methods take caliper arguments (formerly just numeric method derived methods argument). boxplot methods fitted propensity score methods (glm() bigglm()) fill.NAs() now takes contrasts.arg argument mimic model.matrix() Several bug fixes examples, documentation methods pscore.dist() mahal.dist() now deprecated, useful error messages pointing users replacements. Significant performance improvements sparse matching problems. Functions umatched() matched() backwards. Corrected.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"changes-in-optmatch-version-08-1","dir":"Changelog","previous_headings":"","what":"Changes in optmatch Version 0.8-1","title":"Changes in optmatch Version 0.8-1","text":"CRAN release: 2013-01-03 Several small bug fixes","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"changes-in-optmatch-version-08-0","dir":"Changelog","previous_headings":"","what":"Changes in optmatch Version 0.8-0","title":"Changes in optmatch Version 0.8-0","text":"CRAN release: 2012-11-17","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"new-features-0-8-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"Changes in optmatch Version 0.8-0","text":"efficient data structure sparse matching problems, relatively allowed (finite) distances units. Sparse problems often arise calipers employed. new data structure (InfinitySparseMatrix) behaves like simple matrix, allowing cbind(), rbind(), subset() operations, making easier work older optmatch.dlist data structure. match_on(): series methods generate matching problems using new data structure appropriate, using standard matrix problem dense. function deployed along side mdist() function provide complete backward compatibility. New development focus function distance creation, users encouraged use right away. One difference mdist() users within argument. argument takes existing distance specification limits new comparisons pairs finite distances within argument. See match_on(), exactMatch(), caliper() documentation details. exactMatch(): new function create stratified matching problems (cross strata matches forbidden). Users can specify strata using either factor vector convenient formula interface. results can used calls match_on() limit distance calculations -strata treatment-control pairs. New data argument fullmatch() pairmatch(): argument set order match row.names, names, contents passed data.frame vector. avoids potential bugs caused optmatch objects different order users’ data. Test suite expanded now uses testthat library. fill.NAs() allows (optionally) filling columns (previously, first column assumed outcome treatment indicator filled ). New tools find minimum feasible constraints: Large matching problems exceed upper limit matching problem. functions minExactmatch() maxCaliper() find smallest interaction potential factors stratified matchings largest (generous) caliper, respectively, make problem small enough fit maximum problem size limit. See help pages functions information.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"bug-fixes-0-8-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"Changes in optmatch Version 0.8-0","text":"Unmatched units always NA (instead labeled 1.NA similar). avoids obscure bugs feeding results fullmatch() functions. DETAILED CHANGELOG, SEE https://github.com/markmfredrickson/optmatch","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"changes-in-optmatch-version-07-1","dir":"Changelog","previous_headings":"","what":"Changes in optmatch Version 0.7-1","title":"Changes in optmatch Version 0.7-1","text":"CRAN release: 2011-03-06","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"new-features-0-7-1","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"Changes in optmatch Version 0.7-1","text":"pairmatch() new option, remove.unmatchables, may useful conjunction caliper matching. remove.unmatchables = TRUE, prior matching units counterparts within caliper distance removed. Pair matching can still fail, example two distinct treatment units single control, one, available matching ; remove.unmatchables eliminates one simple common reason pair matching fail. Applying summary() optmatch object now creates summary.optmatch containing summary information, addition reporting console (via summary.optmatch() method print()). mdist.formula() longer requires explicit data argument. .e., can get away call like mdist(Treat~X1+X2|S) variables Treat, X1, X2 S available environment ’re working (one parent environments). Previously mdist(Treat~X1+X2|S, data=mydata). (latter formulation still preferred, however, part mdist() gets use data’s row names, whereas otherwise make row names.)","code":""},{"path":[]},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"new-features-0-7","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"Changes in optmatch Version 0.7","text":"New function fill.NAs() replaces missing observations (ie. NA values) minimally informative values (ie. mean observed columns). fill.NAs() handles functions formulas intelligently provides missing indicators variable. See help documentation information examples.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"bug-fixes-0-7","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"Changes in optmatch Version 0.7","text":"mdist.function() method now properly returns optmatch.dlist object use summary.optmatch(), etc. mdist.function() maintains label grouping factor.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"changes-in-optmatch-version-06-1","dir":"Changelog","previous_headings":"","what":"Changes in optmatch Version 0.6-1","title":"Changes in optmatch Version 0.6-1","text":"CRAN release: 2010-02-11","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"new-features-0-6-1","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"Changes in optmatch Version 0.6-1","text":"New mdist() method extract propensity scores models fitted using bigglm() package biglm. mdist()’s formula method now understands grouping factors indicated pipe (|) informative error message mdist() called numeric vectors updated mdist() documentation","code":""},{"path":[]},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"new-features-0-6","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"Changes in optmatch Version 0.6","text":"new generic function, mdist(), creating matching distances. accepts: fitted glm’s, uses extract propensity distances; formulas, uses construct squared Mahalanobis distances; functions, user can construct type distance. function method intuitive work older makedist() function. new function, caliper(), builds mdist() structure provide convenient way add calipers distance. contrast earlier ways adding calipers, caliper() optional argument specify observations excluded caliper requirement — permits one relax just observations, instance. summary.optmatch() now removes strata matching failed (b/c matching problem found infeasible) summarizing. also indicates strata present, many observations fall . Demo updated reflect changes version 0.4, 0.5, 0.6.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"deprecated--defunct-0-6","dir":"Changelog","previous_headings":"","what":"DEPRECATED & DEFUNCT","title":"Changes in optmatch Version 0.6","text":"vignette sufficiently date ’s removed.","code":""},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"bug-fixes-0-6","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"Changes in optmatch Version 0.6","text":"subsetting objects class Optmatch now preserves matched.distances attribute. fixed bug maxControlsCap()/minControlsCap() whereby behaved unreliably subclasses within subjects permissible matches. Removed unnecessary panic fullmatch() given min.controls argument attributes names (created tapply()). fixed bug wherein summary.optmatch() fails retrieve balance tests given propensity model function calls formula. Documentation pages fullmatch(), pairmatch() filled bit.","code":""},{"path":[]},{"path":"https://markmfredrickson.github.io/optmatch/dev/news/index.html","id":"new-features-0-5","dir":"Changelog","previous_headings":"","what":"NEW FEATURES:","title":"Changes in optmatch Version 0.5","text":"summary.optmatch() completely revised. now reports information configuration matched sets matched distances. addition, given fitted propensity model second argument summarizes covariate balance.","code":""}]
